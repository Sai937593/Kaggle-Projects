{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84894,"databundleVersionId":9709193,"sourceType":"competition"},{"sourceId":7949759,"sourceType":"datasetVersion","datasetId":4675026}],"dockerImageVersionId":30786,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-10-30T05:44:16.415050Z","iopub.execute_input":"2024-10-30T05:44:16.415461Z","iopub.status.idle":"2024-10-30T05:44:16.890993Z","shell.execute_reply.started":"2024-10-30T05:44:16.415416Z","shell.execute_reply":"2024-10-30T05:44:16.889706Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e10/sample_submission.csv\n/kaggle/input/playground-series-s4e10/train.csv\n/kaggle/input/playground-series-s4e10/test.csv\n/kaggle/input/loan-approval-prediction/credit_risk_dataset.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"%%capture\n!pip install imblearn","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:16.893104Z","iopub.execute_input":"2024-10-30T05:44:16.893612Z","iopub.status.idle":"2024-10-30T05:44:31.381610Z","shell.execute_reply.started":"2024-10-30T05:44:16.893572Z","shell.execute_reply":"2024-10-30T05:44:31.379773Z"},"trusted":true},"execution_count":2,"outputs":[]},{"cell_type":"code","source":"import kagglehub\n\n# Download latest version\npath = kagglehub.dataset_download(\"chilledwanker/loan-approval-prediction\")\n\nprint(\"Path to dataset files:\", path)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:31.383274Z","iopub.execute_input":"2024-10-30T05:44:31.383675Z","iopub.status.idle":"2024-10-30T05:44:32.517505Z","shell.execute_reply.started":"2024-10-30T05:44:31.383625Z","shell.execute_reply":"2024-10-30T05:44:32.516302Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Path to dataset files: /kaggle/input/loan-approval-prediction\n","output_type":"stream"}]},{"cell_type":"code","source":"import pandas as pd\n\ntrain_df = pd.read_csv('/kaggle/input/playground-series-s4e10/train.csv')\ntest_df = pd.read_csv('/kaggle/input/playground-series-s4e10/test.csv')\nsub_df = pd.read_csv('/kaggle/input/playground-series-s4e10/sample_submission.csv')\noriginal_df = pd.read_csv('/kaggle/input/loan-approval-prediction/credit_risk_dataset.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:32.520317Z","iopub.execute_input":"2024-10-30T05:44:32.520752Z","iopub.status.idle":"2024-10-30T05:44:32.811467Z","shell.execute_reply.started":"2024-10-30T05:44:32.520710Z","shell.execute_reply":"2024-10-30T05:44:32.810089Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"train_df = train_df.drop(columns=\"id\")\ntrain_df = pd.concat([train_df, original_df], axis=0)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:32.813022Z","iopub.execute_input":"2024-10-30T05:44:32.813406Z","iopub.status.idle":"2024-10-30T05:44:32.845231Z","shell.execute_reply.started":"2024-10-30T05:44:32.813369Z","shell.execute_reply":"2024-10-30T05:44:32.843855Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"cat_cols = [col for col in train_df.select_dtypes(exclude=['int', 'float']).columns if col not in ('id', 'loan_status')]\nnum_cols = [col for col in train_df.select_dtypes(include=['int', 'float']).columns if col not in ('id', 'loan_status')]\n\ncat_cols, num_cols","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:32.846672Z","iopub.execute_input":"2024-10-30T05:44:32.847073Z","iopub.status.idle":"2024-10-30T05:44:32.884569Z","shell.execute_reply.started":"2024-10-30T05:44:32.847034Z","shell.execute_reply":"2024-10-30T05:44:32.883232Z"},"trusted":true},"execution_count":6,"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(['person_home_ownership',\n  'loan_intent',\n  'loan_grade',\n  'cb_person_default_on_file'],\n ['person_age',\n  'person_income',\n  'person_emp_length',\n  'loan_amnt',\n  'loan_int_rate',\n  'loan_percent_income',\n  'cb_person_cred_hist_length'])"},"metadata":{}}]},{"cell_type":"code","source":"train_df.isna().sum()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:32.886169Z","iopub.execute_input":"2024-10-30T05:44:32.886644Z","iopub.status.idle":"2024-10-30T05:44:32.918694Z","shell.execute_reply.started":"2024-10-30T05:44:32.886592Z","shell.execute_reply":"2024-10-30T05:44:32.917528Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"person_age                       0\nperson_income                    0\nperson_home_ownership            0\nperson_emp_length              895\nloan_intent                      0\nloan_grade                       0\nloan_amnt                        0\nloan_int_rate                 3116\nloan_percent_income              0\ncb_person_default_on_file        0\ncb_person_cred_hist_length       0\nloan_status                      0\ndtype: int64"},"metadata":{}}]},{"cell_type":"code","source":"na_df = train_df.isna().sum()\nna_cols  = [col for col in na_df.index if na_df[col] > 0]\nna_cols","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:32.920339Z","iopub.execute_input":"2024-10-30T05:44:32.920840Z","iopub.status.idle":"2024-10-30T05:44:32.951066Z","shell.execute_reply.started":"2024-10-30T05:44:32.920770Z","shell.execute_reply":"2024-10-30T05:44:32.949924Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"['person_emp_length', 'loan_int_rate']"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.experimental import enable_iterative_imputer\nfrom sklearn.impute import IterativeImputer\nfrom sklearn.linear_model import Ridge, Lasso\nimport copy\n\nridge = Ridge(alpha=1.0)\nlasso = Lasso(alpha=1.0)\n\nimputed_dfs = {}\nfor model in [ridge, lasso]:\n    df = copy.deepcopy(train_df)\n    df = df[num_cols]\n    print(f'imputing using {model}')\n    imputer = IterativeImputer(estimator=model, max_iter=1500, random_state=0, tol=1e-1)\n    imputed_df = pd.DataFrame(imputer.fit_transform(df), columns=df.columns, index=df.index )\n    model_name = model.__class__.__name__\n    imputed_dfs[model_name] = imputed_df\n\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:32.952477Z","iopub.execute_input":"2024-10-30T05:44:32.952806Z","iopub.status.idle":"2024-10-30T05:44:34.436066Z","shell.execute_reply.started":"2024-10-30T05:44:32.952773Z","shell.execute_reply":"2024-10-30T05:44:34.433520Z"},"trusted":true},"execution_count":9,"outputs":[{"name":"stdout","text":"imputing using Ridge()\nimputing using Lasso()\n","output_type":"stream"}]},{"cell_type":"code","source":"ridge_imputed_df = imputed_dfs['Ridge']\ntrain_df[num_cols] = ridge_imputed_df[num_cols]\ntrain_df.isna().any()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:34.441920Z","iopub.execute_input":"2024-10-30T05:44:34.451591Z","iopub.status.idle":"2024-10-30T05:44:34.537217Z","shell.execute_reply.started":"2024-10-30T05:44:34.451502Z","shell.execute_reply":"2024-10-30T05:44:34.536005Z"},"trusted":true},"execution_count":10,"outputs":[{"execution_count":10,"output_type":"execute_result","data":{"text/plain":"person_age                    False\nperson_income                 False\nperson_home_ownership         False\nperson_emp_length             False\nloan_intent                   False\nloan_grade                    False\nloan_amnt                     False\nloan_int_rate                 False\nloan_percent_income           False\ncb_person_default_on_file     False\ncb_person_cred_hist_length    False\nloan_status                   False\ndtype: bool"},"metadata":{}}]},{"cell_type":"code","source":"train_df['income_to_loan_ratio'] = train_df['person_income'] / train_df['loan_amnt']\ntrain_df['age_emp_length']  = train_df['person_age'] * train_df['person_emp_length']\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:34.538584Z","iopub.execute_input":"2024-10-30T05:44:34.539075Z","iopub.status.idle":"2024-10-30T05:44:34.548703Z","shell.execute_reply.started":"2024-10-30T05:44:34.539033Z","shell.execute_reply":"2024-10-30T05:44:34.547085Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"code","source":"cat_cols = [col for col in train_df.select_dtypes(exclude=['int', 'float']).columns if col not in ('id', 'loan_status')]\nnum_cols = [col for col in train_df.select_dtypes(include=['int', 'float']).columns if col not in ('id', 'loan_status')]\n\ncat_cols, num_cols","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:34.550296Z","iopub.execute_input":"2024-10-30T05:44:34.550818Z","iopub.status.idle":"2024-10-30T05:44:34.589863Z","shell.execute_reply.started":"2024-10-30T05:44:34.550765Z","shell.execute_reply":"2024-10-30T05:44:34.588442Z"},"trusted":true},"execution_count":12,"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"(['person_home_ownership',\n  'loan_intent',\n  'loan_grade',\n  'cb_person_default_on_file'],\n ['person_age',\n  'person_income',\n  'person_emp_length',\n  'loan_amnt',\n  'loan_int_rate',\n  'loan_percent_income',\n  'cb_person_cred_hist_length',\n  'income_to_loan_ratio',\n  'age_emp_length'])"},"metadata":{}}]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport copy \ndef box_plots_num_cols(df:pd.DataFrame, num_columns:list[str]):\n    df = copy.deepcopy(df)\n    base_width = 5\n    base_height = 3\n    columns = num_columns\n    cols = round(len(columns) / 2)\n    rows = len(columns) - cols\n    fig_width = cols * base_width\n    fig_height = rows * base_height\n    fig, axes = plt.subplots(rows, cols, figsize=(fig_width, fig_height))\n    axes = axes.flatten() if rows > 1 else [axes]\n    for i, col in enumerate(columns):\n        axes[i].boxplot(df[col])\n        axes[i].set_title(col)\n    for j in range(i+1, len(axes)):\n        axes[j].axis('off')\n    plt.tight_layout()\n\nbox_plots_num_cols(train_df, num_cols)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:34.591271Z","iopub.execute_input":"2024-10-30T05:44:34.591861Z","iopub.status.idle":"2024-10-30T05:44:37.158041Z","shell.execute_reply.started":"2024-10-30T05:44:34.591790Z","shell.execute_reply":"2024-10-30T05:44:37.156396Z"},"trusted":true},"execution_count":13,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 2000x1500 with 20 Axes>","image/png":"iVBORw0KGgoAAAANSUhEUgAAB8YAAAXRCAYAAADsS/daAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuNSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/xnp5ZAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeVxV1f7/8fcBZJLBUJmuqORs4oSGaJomiWOSWlmYmqZpYCllSrecMinT0hyzQeuq14brUHqd0hwqnDBKzQELh6sClgKiCArn90c/9rcTiJrAYXg9H4/ziL3W56z92fvxsMXisweT2Ww2CwAAAAAAAAAAAACAcsrG2gkAAAAAAAAAAAAAAFCcKIwDAAAAAAAAAAAAAMo1CuMAAAAAAAAAAAAAgHKNwjgAAAAAAAAAAAAAoFyjMA4AAAAAAAAAAAAAKNcojAMAAAAAAAAAAAAAyjUK4wAAAAAAAAAAAACAco3COAAAAAAAAAAAAACgXKMwDgAAAAAAAAAAAAAo1yiMAwAAABWYyWTSpEmTrJ0GAAAoxQYPHqzatWtbO42bWrJkiUwmk/bt22ftVAAAJSxvDjhx4oS1UwFQilEYBwAAAAAAAFBmzJ8/X0uWLLF2GgAAlBvMrago7KydAAAAAADryczMlJ0dywIAAFB2zJ8/X9WqVdPgwYOtnQoAAOUCcysqCu4YB8qxK1euWDsFAAAqvNI+Hzs6OlIYBwCUK6V97gUAAABgHRTGASuZNGmSTCaTjhw5okcffVRubm6qWrWqnn/+eV29etUidunSpQoMDJSTk5M8PDzUv39/nT592iKmY8eOatKkieLi4tShQwc5Ozvr5ZdfliTt27dPoaGhqlatmpycnOTv768hQ4ZYfP/y5ct64YUX5OfnJwcHBzVo0EAzZsyQ2Wy2iDOZTIqMjNTq1avVpEkTOTg46J577tGGDRtu+xzMmDFDbdu2VdWqVeXk5KTAwEB98cUX+eIyMzP13HPPqVq1anJ1ddVDDz2kM2fOFPhO1DNnzmjIkCHy8vIycvvoo49uOzcAQMXAfJz/HeN55+T48eMaPHiwqlSpInd3dz311FMFFhqWLl2qe++9V87OzrrrrrvUoUMHbdq0ySJm/vz5uueee+Tg4CBfX19FREQoNTW1wHP3008/6f7775ezs7Pq1q1r/G6wfft2BQUFycnJSQ0aNNDXX3+dLxd+DwCA0o+5V8rNzdWsWbN0zz33yNHRUV5eXnrmmWd08eJFi7jatWurZ8+e2rZtm1q1aiUnJycFBARo27ZtkqSVK1cqICBAjo6OCgwM1A8//GDx/cGDB8vFxUW//vqrQkNDVblyZfn6+mrKlCn5ju/vuN3j+Pbbb3XvvffK0dFRd999tz755JN8Y+b9HuDk5KQaNWpo6tSpWrx4scU7Y2vXrq1Dhw5p+/btMplMMplM6tixo8U4WVlZioqKUvXq1VW5cmU9/PDDOn/+/B0fMwCgbLmVtejOnTv1yCOPqGbNmnJwcJCfn5/GjBmjzMxMi7i8efXMmTMKCwuTi4uLqlevrhdffFE5OTm3ldft7vPUqVPq2bOnXFxc9I9//EPz5s2TJB04cEAPPPCAKleurFq1amn58uUW38977/p3331X6Lx4K3MrUF5QGAes7NFHH9XVq1cVExOj7t27691339Xw4cON/tdff10DBw5UvXr19Pbbb2v06NHasmWLOnTokG8S//3339WtWzc1b95cs2bNUqdOnZSSkqIuXbroxIkTGj9+vObMmaPw8HDt2rXL+J7ZbNZDDz2kd955R127dtXbb7+tBg0aaOzYsYqKisqX87fffqtnn31W/fv31/Tp03X16lX17dtXv//++20d++zZs9WiRQtNmTJF06ZNk52dnR555BGtW7fOIm7w4MGaM2eOunfvrjfffFNOTk7q0aNHvvGSk5PVpk0bff3114qMjNTs2bNVt25dDR06VLNmzbqt3AAAFUtFno8LOyeXLl1STEyMHn30US1ZskSTJ0+2iJk8ebKefPJJVapUSVOmTNHkyZPl5+enrVu3GjGTJk1SRESEfH19NXPmTPXt21fvvfeeunTpomvXrlmMd/HiRfXs2VNBQUGaPn26HBwc1L9/f3366afq37+/unfvrjfeeEOXL19Wv379dOnSJeO7/B4AAGVLRZ57n3nmGY0dO1bt2rXT7Nmz9dRTT2nZsmUKDQ3NNzceP35cTzzxhHr16qWYmBhdvHhRvXr10rJlyzRmzBgNGDBAkydP1i+//KJHH31Uubm5Ft/PyclR165d5eXlpenTpyswMFATJ07UxIkTbyvnojiOfv366cEHH9TMmTN11113afDgwTp06JARc+bMGXXq1EmHDh1SdHS0xowZo2XLlmn27NkWY82aNUs1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FOVJRZmPrTn+7ezzZrnwewAAlH0VZe7Nzc2Vp6enli1bVmD/X//w/XfnxuJWVMdRXPla+/wAAMqGnJwcPfjgg7pw4YLGjRunhg0bqnLlyjpz5owGDx5srDXz3Gh+scY+b2euY14E/g+FccDKEhISLO6GPn78uHJzc1W7dm3Z2trKbDbL39/fuKL772rTpo3atGmj119/XcuXL1d4eLhWrFihp59+WrVq1dLXX3+tS5cuWVwpf+TIEUlSrVq17mjfBfnPf/4jR0dHbdy40bhaX5IWL15sEVerVi3l5uYqMTHR4m6B48ePW8RVr15drq6uysnJUUhISJHnC8B6unXrpm7dut2wPysrS//85z/173//W6mpqWrSpInefPNNdezYUZJ0+PBhLViwQAcPHjSuFP7rUyiAijof34k6deooNzdXP//8s8UjT/8sL+ejR49a3K2WnZ2txMTEIpuz+T0AAMqeijr31qlTR19//bXatWtXYEG/qOXm5urXX3+1OI/Hjh2TJNWuXftvj1scx1GrVq18a30p//pfUr475AAA+LNbXYseOHBAx44d08cff6yBAwcacZs3by623Kyxz1vB3IqKgneMA1Y2b948i+05c+ZI+qMQ1KdPH9na2mry5Mn5rt4ym836/fffbzr+xYsX830374/XeY8v7969u3JycjR37lyLuHfeeUcmk6nQgtTfZWtrK5PJpJycHKPtxIkTWr16tUVcaGioJGn+/PkW7Xnn6c/j9e3bV//5z3908ODBfPs7f/58EWUOoLSJjIxUbGysVqxYoZ9++kmPPPKIunbtqoSEBEnSV199pbvvvltr166Vv7+/ateuraeffpo7xmGhos7HdyIsLEw2NjaaMmVKviva8441JCRE9vb2evfddy2O/8MPP1RaWpp69OhRJLnwewAAlD0Vde599NFHlZOTo9deey1f3/Xr15Wamlrk+/zz8ZnNZs2dO1eVKlVS586d//aYxXEcoaGhio2NVXx8vNF24cKFAu9Kr1y5crGcKwBA+XCra9G8O6n/HGM2mzV79uxiy80a+7wVzK2oKLhjHLCyxMREPfTQQ+ratatiY2O1dOlSPfHEE2rWrJkkaerUqYqOjtaJEycUFhYmV1dXJSYmatWqVRo+fLhefPHFQsf/+OOPNX/+fD388MOqU6eOLl26pPfff19ubm7q3r27JKlXr17q1KmT/vnPf+rEiRNq1qyZNm3apDVr1mj06NGqU6dOkR93jx499Pbbb6tr16564oknlJKSonnz5qlu3br66aefjLjAwED17dtXs2bN0u+//642bdpo+/btxhXuf76S7Y033tA333yjoKAgDRs2TI0bN9aFCxe0f/9+ff311xTBgHLo1KlTWrx4sU6dOiVfX19J0osvvqgNGzZo8eLFmjZtmn799VedPHlSn3/+uT755BPl5ORozJgx6tevn7Zu3WrlI0BpUVHn4ztRt25d/fOf/9Rrr72m9u3bq0+fPnJwcNDevXvl6+urmJgYVa9eXdHR0Zo8ebK6du2qhx56SEePHtX8+fPVunVrDRgwoMjy4fcAAChbKurce//99+uZZ55RTEyM4uPj1aVLF1WqVEkJCQn6/PPPNXv2bPXr16/I9ufo6KgNGzZo0KBBCgoK0vr167Vu3Tq9/PLL+R53bu3jeOmll7R06VI9+OCDGjVqlCpXrqwPPvhANWvW1IULFyzW/4GBgVqwYIGmTp2qunXrytPTUw888MDfPh4AQPlyq2vRhg0bqk6dOnrxxRd15swZubm56T//+U+xvnvbGvu8FcytqCgojANW9umnn2rChAkaP3687OzsFBkZqbfeesvoHz9+vOrXr6933nlHkydPliT5+fmpS5cueuihh246/v333689e/ZoxYoVSk5Olru7u+69914tW7bMeGydjY2NvvzyS02YMEGffvqpFi9erNq1a+utt97SCy+8UCzH/cADD+jDDz/UG2+8odGjR8vf319vvvmmTpw4YVEYl6RPPvlE3t7e+ve//61Vq1YpJCREn376qRo0aCBHR0cjzsvLS3v27NGUKVO0cuVKzZ8/X1WrVtU999yjN998s1iOA4B1HThwQDk5OfkesZmVlaWqVatK+uPxkVlZWfrkk0+MuA8//FCBgYE6evSo8Xh1VGwVdT6+U1OmTJG/v7/mzJmjf/7zn3J2dlbTpk315JNPGjGTJk1S9erVNXfuXI0ZM0YeHh4aPny4pk2bpkqVKhVZLvweAABlS0WeexcuXKjAwEC99957evnll2VnZ6fatWtrwIABateuXZHuy9bWVhs2bNDIkSM1duxYubq6auLEiZowYcIdj13Ux+Hn56dvvvlGzz33nKZNm6bq1asrIiJClStX1nPPPWex/p8wYYJOnjyp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fvppbdmyRaNHj9a6desUGhoqSfr00081cOBALVy4UEFBQZo1a5Y+//xzHT16VJ6eniV2PgDcXtG7nJbqgBJxO/MWd4wDKNTYsWMlSVFRURZFcUmyt7fX6NGjLeIAQJLefPNN+fn5afHixbr33nvl7++vLl263LAonpWVpfT0dIsPgDu3c+dOnThxQi+//LJFUVySbGxsFB0drcTERO3cudNKGQIAgMI8+eSTkqQBAwZYFMUlydHRUU888YRFHADr6dWrl7p376569eqpfv36ev311+Xi4qJdu3YZMc7OzvL29jY+f/7j/aZNm/Tzzz9r6dKlat68ubp166bXXntN8+bNU3Z2tiRp4cKF8vf318yZM9WoUSNFRkaqX79+euedd4xx3n77bQ0bNkxPPfWUGjdurIULF8rZ2VkfffTRDXNnTQ4Uv169elk8xa1Xr17WTgmokCiMAyhUQkKCJOnpp58usH/o0KEWcQAgSV9++aVatWqlRx55RJ6enmrRooXef//9G8bHxMTI3d3d+Pj5+ZVgtkD5de7cOUlSkyZNCuzPa8+LAwAApcsvv/wiSXrxxRcL7I+KirKIA1A65OTkaMWKFbp8+bKCg4ON9mXLlqlatWpq0qSJoqOjdeXKFaMv73VHXl5eRltoaKjS09N16NAhIyYkJMRiX6GhoYqNjZX0x9Md4+LiLGJsbGwUEhJixBSENTlQ/FavXq02bdrIxcVFbdq00erVq62dElAhURgHUKh69epJkj744IMC+z/88EOLOACQpF9//VULFixQvXr1tHHjRo0cOVLPPfecPv744wLjo6OjlZaWZnxOnz5dwhkD5ZOPj48k6eDBgwX257XnxQEAgNIl74lLM2bMKLD/7bfftogDYF0HDhyQi4uLHBwcNGLECK1atUqNGzeWJD3xxBNaunSpvvnmG0VHR+tf//qXBgwYYHw3KSnJoiguydhOSkoqNCY9PV2ZmZn67bfflJOTU2BM3hgFYU0OFL+CnuIGoOTxLw9Aod566y1Jfyy28x7blCc7O1uzZs2yiAMA6Y93F7ds2VLTpk1TixYtNHz4cA0bNkwLFy4sMN7BwUFubm4WHwB3rn379qpdu7amTZum3Nxci77c3FzFxMTI399f7du3t1KGAIrajh071KtXL/n6+spkMlnciXLt2jWNGzdOAQEBqly5snx9fTVw4ECd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m2/Yv3HjxpuO4eHhoeXLlxca07RpU+3cubPQmEceeUSPPPLITfcHAEBFwx3jAAr10UcfFWkcAAAAAAAAAAAAUNIojAMo1JEjR4o0DgAAAAAAAAAAAChpFMYBFGrKlClFGgcAAAAAAAAAAACUNArjAAAAAAAAAAAAAIByjcI4AAAAAAAAAAAAAKBcs7N2AgAAAACKX05Ojnbu3Klz587Jx8dH7du3l62trbXTAgAAAAAAAEoEd4wDAAAA5dzKlStVt25dderUSU888YQ6deqkunXrauXKldZODQAA3KLMzExFRkYqNDRUkZGRyszMtHZKAAAAQJlCYRwAAAAox1auXKl+/fopICBAsbGxunTpkmJjYxUQEKB+/fpRHAcAoAwICwuTs7Oz5s2bp02bNmnevHlydnZWWFiYtVMDAAAAygwK4wAK1aRJkyKNA1AxxMTEqHXr1nJ1dZWnp6fCwsJ09OhRa6cFVDg5OTl64YUX1LNnT61evVpt2rSRi4uL2rRpo9WrV6tnz5568cUXlZOTY+1UAQDADYSFhWnNmjWyt7fX+PHjdfz4cY0fP1729vZas2YNxXEAAADgFlEYB1CogwcPFmkcgIph+/btioiI0K5du7R582Zdu3ZNXbp00eXLl62dGlCh7Ny5UydOnNDLL78sGxvLX/1tbGwUHR2txMRE7dy500oZArC2N954QyaTSaNHjzbarl69qoiICFWtWlUuLi7q27evkpOTrZckUIFlZmYaRfFLly4pJiZGderUUUxMjC5dumQUx3msOgAAAHBzdtbY6ZkzZzRu3DitX79eV65cUd26dbV48WK1atVKkmQ2mzVx4kS9//77Sk1NVbt27bRgwQLVq1fPGukCAIDbtGHDBovtJUuWyNPTU3FxcerQoUO++KysLGVlZRnb6enpxZ4jUBGcO3dO0h9PdsnOztb8+fP1yy+/qE6dOnr22WeNJ77kxQGoWPbu3av33ntPTZs2tWgfM2aM1q1bp88//1zu7u6KjIxUnz599N1331kpU6DiGjt2rCQpKipKtra22rZtm86dOycfHx+1b99eo0eP1vTp0zV27FjNnTvXytkCAFD6JSQk6NKlS1bZ9+HDhy3+aw2urq7U2lChlXhh/OLFi2rXrp06deqk9evXq3r16kpISNBdd91lxEyfPl3vvvuuPv74Y/n7++vVV19VaGio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JycrMDBQTZo00fvvv6+ffvpJH3zwgWrUqKFhw4blOOclS5bo8uXLGjp0qCwWiyZNmqRu3brp2LFjKlmypIYOHarTp09r/fr1+uyzz+7qGBcuXFBQUJB69eqlZ599Vl5eXpJuFWtXV1eFhITI1dVVP//8s8aOHav4+HhNnjxZkvTGG28oLi5Op06d0tSpUyVJrq6ukm6diD755JPatm2bhgwZorp162rv3r2aOnWq/v77b61atSrHrw8AIO8V9Pp56dIlPf744+rZs6d69+6tr776SsOGDZOTk5P5pXx2a9LPP/+sr776SsHBwapYsaKqVaum06dPq3HjxoqNjdWQIUNUp04d/fPPP1q+fLmuXr0qJycnXb16Va1bt9Y///yjoUOHqkqVKtq+fbtCQ0N15syZdFN+5kedt+VOx5VunUwHBASoZMmSGjJkiKpVq6ajR4/q22+/1TvvvCNJ+uuvvxQQECA3Nze98sorKlmypD7++GO1adNGmzdvVpMmTayO+8ILL8jb21sTJkzQjh07NHfuXHl4eGj79u2qUqWK3n33XX333XeaPHmy6tWrp379+pnbDh06VAsXLtTAgQP14osvKjIyUjNnztTvv/9u9T4EgILqTnUkVXBwsDw8PDR+/Hiz5h4/flybNm3K9pVjPXv2VLVq1RQWFqYdO3Zo+vTpunTpktUX6e+8847efPNN9ezZU//+97917tw5zZgxQ61atdLvv/8uDw8PM9bWuePZs2fVoUMHVapUSa+99po8PDwUFRWlFStWmNsZhqEnn3xSGzdu1KBBg9SoUSP98MMPevnll/XPP/+Y55Kptm3bphUrVuj5559X2bJlNX36dHXv3l0nTpxQhQoVsvz8Bw0apIULFyooKEj//ve/dfPmTW3dulU7duzQww8/bMbZqvsxMTFq2rSpOXBeqVIlff/99xo0aJDi4+M1YsQISdK1a9fUrl07nThxQi+++KJ8fX312Wef6eeff87Wv1VaL7zwgsqVK6dx48YpKipK06ZNU3BwsJYuXZrhNvPmzdOLL76oHj16mD+A+PPPP7Vz50716dNH3bp1099//60vvvhCU6dOVcWKFSVJlSpVuus8s/PeuXTpkjp27Khu3bqpZ8+eWr58uV599VXVr19fQUFBkm79eOLRRx/VmTNn9NJLL8nb21tLlizRxo0brY6b2fcQqf773//KwcFBo0ePVlxcnCZNmqS+fftq586dd/18AcCejhw5oh49emjQoEHq37+/5s+frwEDBsjf318PPPCAJOnKlSsKCAjQgQMH9Nxzz+mhhx7S+fPntXr1ap06dUoVK1bUtWvX1KZNGx05ckTBwcHy8/PTsmXLNGDAAMXGxuqll16yOu7ixYuVlJSkF154QRcvXtSkSZPUs2dPPfroo9q0aZNeffVVHTlyRDNmzNDo0aOtfkD22WefqX///goMDNR7772nq1evavbs2WrZsqV+//33dD9qsqVu3bqaOHGixo4dqyFDhiggIECS1Lx5c0kyzxEfeeQRhYWFKSYmRh9++KF++eWXdLUou3766ScFBQWpevXqGj9+vK5du6YZM2aoRYsW2r17t5n/b7/9pu3bt6tXr1669957FRUVpdmzZ6tNmzbav3+/SpcubbXfu6nzGXn66adVq1Ytvfvuu+aPDdevX69jx45p4MCB8vb21l9//aW5c+fqr7/+0o4dO2SxWLL9uSAmJkbNmzfX1atX9eKLL6pChQpatGiRnnzySS1fvlxPPfVUtnNHMWQAyHMLFiwwJBmRkZHG2bNnDScnJ6NDhw5GcnKyGTNz5kxDkjF//nyz7erVq+n2FRYWZlgsFuP48eNmW//+/Q1JxsSJE61iH3zwQcPf3z9bufbv39+oWrWquR4ZGWlIMipUqGBcvHjRbP/mm28MSca3335rtg0fPty42z8rrVu3NiQZc+bMSddn63UYOnSoUbp0aeP69etm2xNPPGGVe6rPPvvMcHBwMLZu3WrVPmfOHEOS8csvv9xVzgCAvFWY6mdqHfvggw/MtsTERKNRo0aGp6enkZSUZBhG9mqSJMPBwcH466+/rGL79etnODg4GL/99lu6PFJSUgzDMIy33nrLKFOmjPH3339b9b/22muGo6OjceLECcMw8q/O5+TzRatWrYyyZcta/dulfa6GYRhdu3Y1nJycjKNHj5ptp0+fNsqWLWu0atXKbEt9TwUGBlpt36xZM8NisRj/+c9/zLabN28a9957r9G6dWuzbevWrYYkY/HixVa5rFu3zmY7ABREd6ojqX8r/f39zfplGIYxadIkQ5LxzTffZPlY48aNMyQZTz75pFX7888/b0gy/vjjD8MwDCMqKspwdHQ03nnnHau4vXv3GiVKlLBqz+jcceXKlYYkm88r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+KICAwPl6OioXr165WifzZs3V7ly5dS/f3+9+OKLslgs+uyzz2x+geDv76+lS5cqJCREjzzyiFxdXdW5c2f961//0ldffaX//Oc/2rhxo1q0aKHk5GQdPHhQX331lX744Qc9/PDDOcoTAJC3CkP99PX11XvvvaeoqCjdd999Wrp0qfbs2aO5c+ea97fMjZr07rvv6scff1Tr1q01ZMgQ1a1bV2fOnNGyZcu0bds2eXh46OWXX9bq1avVqVMnDRgwQP7+/kpISNDevXu1fPlyRUVFqWLFitl6fnlR57Ni+vTpatmypR566CENGTJEfn5+ioqK0tq1a7Vnzx5J0ttvv63169erZcuWev7551WiRAl9/PHHSkxM1KRJk3Itl9atW2vo0KEKCwvTnj171KFDB5UsWVKHDx/WsmXL9OGHH6pHjx65djwAyAt3qiOpkpKS1K5dO/Xs2dOsuS1bttSTTz6Z7WNGRkbqySefVMeOHRUeHq7PP/9cffr0UcOGDSXduprr7bffVmhoqKKiotS1a1eVLVtWkZGRWrlypYYMGaLRo0dneoxFixbpo48+0lNPPaUaNWro8uXLmjdvntzc3MwvjTt37qy2bdvqjTfeUFRUlBo2bKgff/xR33zzjUaMGGFeVZab2rZtq3/961+aPn26Dh8+bE4funXrVrVt21bBwcGZbv/f//5XGzduVJMmTTR48GDdf//9unjxonbv3q2ffvpJFy9elCQNHjxYM2fOVL9+/RQRESEfHx999tlnKl26dK4/p8x06NBB3t7eatGihby8vHTgwAHNnDlTTzzxhHmVfupnijfeeEO9evVSyZIl1blzZ6tZd7IqN947txs6dKhmzpyp3r1766WXXpKPj48WL14sFxcXSdZXtmX0PQQAFGcvv/yyli9frqefflrPPfec/P39dfHiRa1evVpz5sxRw4YNNWTIEH388ccaMGCAIiIiVK1aNS1fvly//PKLpk2bZjWzS064ublp9uzZ+te//qWHHnpIvXr1UqVKlXTixAmtXbtWLVq0SPeDuYzUqFFDHh4emjNnjsqWLasyZcqoSZMm8vPz03vvvaeBAweqdevW6t27t2JiYvThhx+qWrVqGjlyZI6ew+TJkxUUFKRmzZpp0KBBunbtmmbMmCF3d3eNHz/ejOvUqZM+++wzubu76/7771d4eLh++uknVahQ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q1fPZsz58+f11ltvaciQIZnuq2PHjvr000+1YcMGvffee9q8ebOCgoIy/AKPL9SBvHHmzBlJUr169XTx4kXVr19fFSpUUP369XXx4kXz//XUOADYtGmT3n33XX300UfavXu3VqxYobVr1+qtt97KcJvQ0FDFxcWZy8mTJ/MxY6Do4yQcAIDC7dSpUzbbY2Ji8jkTADmRkJCghg0batasWen6rl69qt27d+vNN980z6UPHTqkJ5980iqub9+++uuvv7R+/XqtWbNGW7ZssfquPT4+Xh06dFDVqlUVERGhyZMna/z48Zo7d26ePz8A6a1YsUI9evRQ/fr1FR4ersuXLys8PFz169dXjx49OC8H8lmuTqU+bNgwff/999q2bZvNX7LGx8frscceU/ny5bV69WqVLFkyy/s+duyYatSooZ9++knt2rVL188UrEDe2LRpk9q2baty5crp0qVL6fpT2zdu3Kg2bdrkf4JAEVFQpym7m6nUAwIC1LRpU02ePNls+/zzzzVkyBBduXJFDg53/l1eQX09gMIo9SS8U6dOev3111WvXj3t27dP7777rtasWaPly5erW7du9k4TKNSoW+nxmgC5Y8aMGXrxxRclZX6P8enTp3OPcSAH7FG3LBZLuv+vb/fbb7+pcePGOn78uKpUqaIDBw7o/vvv12+//aaHH35YkrRu3To9/vjjOnXqlHx9fTV79my98cYbio6OlpOTkyTptdde06pVq3Tw4MEs5UYdB3JH2tuUrlq1yuo7sZSUFHXt2pXblAK5wC5TqQcHB2vNmjXauHGjzUHxy5cvq2PHjipbtqxWrlyZrUFxSapevboqVqyoI0eO2Ox3dnaWm5ub1QIg5wICAuTg4GAOijdt2lQbNmxQ06ZNJUmXLl2So6OjAgIC7JkmgDzi5OQkf39/bdiwwWxLSUnRhg0b1KxZM5vbXL16Nd3gd+qHe+57COSv5ORkjRo1Sp06ddJXX32lHTt2KDQ0VDt27NBXX32lTp06afTo0UyrDgBAAZV2sPupp56SxWIxl9RB8dvjABQdcXFxslgs8vDwkCSFh4fLw8PDHBSXpPbt28vBwUE7d+40Y1q1amUOiktSYGCgDh06ZPOiF4nblAJ5Je1tSm//rszBwYHblAJ2kOOBccMwFBwcrJUrV+rnn3+Wn59fupjU6VucnJy0evVqubi4ZPs4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fvCD3HHHHZk5c2bOOuusLF26NCeffPKGtgsAtNCbb76ZxsbG9OzZs9n+nj17pq6ubp3OcfHFF6d3797NwvUP8koUAAAAAEpJr169Cl//9erwD25/sA5oWx039ATPPPNMhg0bVtgeO3ZskmTUqFGZMGFCLrrooixdujSnn356Fi1alAMOOCCTJ0/OlltuWTjm5ZdfzptvvlnY/spXvpI33ngjl112Werq6rLXXntl8uTJH/oHeQBg4/fNb34zP/nJTzJ16tRm8/8HVVRUpKKiop07AwAAAIC2MXjw4MLXhx56aI444oh07tw5y5Yty/33358HH3zwQ3VA29rgYHzo0KFrfQ9CWVlZrrrqqlx11VUfWTN37twP7RszZkzGjBmzoe0BABtom222SXl5eRYsWNBs/4IFC1JdXb3WY7/97W/nm9/8Zh5++OHssccebdkmAAAAAGw0brrppsLX5eXl2XvvvTNgwIDMmDGjEIqvrjv//POL0SJsdtr0HeMAwKavU6dOGTRoUKZMmVLYt2rVqkyZMiU1NTUfedw111yTr3/965k8eXI+85nPtEerAAAAALBReOKJJ5L85RWCM2bMyH777ZfKysrst99+ef7553PxxRc3qwPa3gavGAcASt/YsWMzatSofOYzn8nnPve5fO9738vSpUtz8sknJ0lOPPHE/M3f/E3Gjx+fJPnWt76Vyy67LPfcc0923HHHwrvIu3Xrlm7duhXtPgAAYEPMnj07ixcvLtr1Z86c2ezPYujevXt22WWXol0fADYVq/8NrHfv3nnppZfy+OOPZ/78+enVq1eGDBmSG2+8sVkd0PYE4wDAx/rKV76SN954I5dddlnq6uqy1157ZfLkyenZs2eSZN68eenQ4f8eRHPzzTdnxYoVGTlyZLPzXH755bniiivas3UAAGgVs2fPzq677lrsNpIkxx9/fFGv/6c//Uk4DgAf44QTTshdd92Vyy+/PKeddlqzsZUrVxb+jeyEE04oQneweRKMAwDrZMyYMRkzZswax6ZOndpse+7cuW3fEAAAtKPVK8Xvuuuu9O/fvyg9LFu2LHPnzs2OO+6Yzp07t/v1Z86cmeOPP76oq+YBYFNx4IEHprKyMm+//Xa6dOmSVatWFcY6dOiQVatWpbKyMgceeGARu4TNi2AcAAAAANZR//79s88++xTt+vvvv3/Rrg0ArLvy8vKcccYZufbaa5uF4kkK22eccUbKy8uL0R5sljp8fAkAAAAAAACwrhobG3PHHXesteaOO+5IY2NjO3UECMYBAAAAAACgFU2dOjULFy5MkpSVlTUbW729cOHCD72iEGg7gnEAAAAAAABoRb/5zW8KX/fo0SM/+MEPMn/+/PzgBz9Ijx491lgHtC3BOAAAAAAAALSiOXPmJEm6d++eP//5z1myZEn+9V//NUuWLMmf//zndO/evVkd0PY6FrsBAAAAAAAAKCWrH6PeoUOHVFZWNnuX+AUXXJCuXbs2qwPanmAcAAAAAAAAWlG3bt2SJPX19R8aa2xsTENDQ7M6oO0JxgEAoJ2UrXwve1d3SOdFf0pe3/zeatR50Z+yd3WHlK18r9itAADARmf8+PGZOHFiZs2alc6dO2e//fbLt771rey2226Fmvfeey/nn39+fvKTn2T58uUZPnx4brrppvTs2bNQM2/evJx11ll55JFH0q1bt4waNSrjx49Px47iAGhPNTU1+cUvfrFOdUD7MBMCAEA72XLJvDx7RrfksTOSx4rdTfvrn+TZM7pl5pJ5SfYrdjsAALBRefTRRzN69Oh89rOfzcqVK3PJJZfk4IMPzgsvvFB45PJ5552XBx54ID/72c9SVVWVMWPG5Mgjj8yTTz6Z5C+rUA8//PBUV1fnqaeeyvz583PiiSdmiy22yNVXX13M24PNTlNTU6vWARtOMA4AAO3kvW7bZ59bl+Tuu+9O/379it1Ou5s5a1aOO+64/Oiw7YvdCgAAbHQmT57cbHvChAnp0aNHpk2bls9//vOpr6/Pj370o9xzzz35u7/7uyTJ7bffnv79++fpp5/Ovvvum1//+td54YUX8vDDD6dnz57Za6+98vWvfz0XX3xxrrjiinTq1OlD112+fHmWL19e2F79eGdgw/zyl79c57p/+Zd/aeNugEQwDgAA7aap45b5fd2qLNtq16T3XsVup90tq1uV39etSlPHLYvdCgAAbPRWv5d46623TpJMmzYt77//fg466KBCTb9+/bL99tuntrY2++67b2prazNw4MBmj1YfPnx4zjrrrDz//PPZe++9P3Sd8ePH58orr2zju4HNz/z581u1Dthwm9+LDQEAAAAAYCO2atWqnHvuudl/Oty8AgAAa+1JREFU//0zYMCAJEldXV06deqUrbbaqlltz549U1dXV6j5YCi+enz12JqMGzcu9fX1hc+rr77ayncDm6e//t/ihtYBG86KcQAAAAAA2IiMHj06M2bMyBNPPNHm16qoqEhFRUWbXwcAis2KcQAAAAAA2EiMGTMm999/fx555JFst912hf3V1dVZsWJFFi1a1Kx+wYIFqa6uLtQsWLDgQ+Orx4D2s3DhwlatAzacFeOwiXn33XeTJM8++2xRrr9s2bLMnTs3O+64Yzp37tzu1585c2a7XxMAAAAA2lpTU1POOeec/PznP8/UqVOz0047NRsfNGhQtthii0yZMiVHHXVUkuTFF1/MvHnzUlNTkySpqanJv/7rv2bhwoXp0aNHkuShhx5KZWVldt999/a9IdjMvfHGG61aB2w4wThsYmbNmpUkOe2004rcSXF179692C0AAAAAQKsZPXp07rnnnvziF79I9+7dC+8Er6qqSufOnVNVVZVTTjklY8eOzdZbb53Kysqcc845qampyb777pskOfjgg7P77rvnhBNOyDXXXJO6urpceumlGT16tMelQzvbYostWrUO2HBtHozvuOOOeeWVVz60/+yzz86NN974of0TJkzIySef3GxfRUVF3nvvvTbrETYlI0aMSJL069cvXbp0affrz5w5M8cff3zuuuuu9O/fv92vn/wlFN9ll12Kcm0AAAAAaAs333xzkmTo0KHN9t9+++056aSTkiTXXXddOnTokKOOOirLly/P8OHDc9NNNxVqy8vLc//99+ess85KTU1NunbtmlGjRuWqq65qr9sA/n99+vTJO++8U9j+xCc+ke233z7z5s1rtr9Pnz7FaA82S20ejP/ud79LY2NjYXvGjBn5whe+kH/8x3/8yGMqKyvz4osvFrbLysratEfYlGyzzTY59dRTi91G+vfvn3322afYbQAAAABASWhqavrYmi233DI33njjGhedrbbDDjvkv//7v1uzNWA99OrVK3/84x8L2++8806zQPyDdUD76NDWF9h2221TXV1d+Nx///3Zeeed87d/+7cfeUxZWVmzY3r27Pmx11m+fHkaGhqafQAAAICWueKKK1JWVtbs069fv2K3BQAAm5Rp06a1ah2w4do8GP+gFStW5K677spXv/rVta4CX7JkSXbYYYf06dMnX/rSl/L8889/7LnHjx+fqqqqwsejJwAAAGD9fPrTn878+fMLnyeeeKLYLQEAwCZl1apVrVoHbLg2f5T6B02aNCmLFi0qvA9lTXbbbbf8+Mc/zh577JH6+vp8+9vfzn777Zfnn38+22233UceN27cuIwdO7aw3dDQIBwHAGCj8u677yZJnn322aJcf9myZZk7d2523HHHdO7cud2vP3PmzHa/JrB+OnbsmOrq6nWuX758eZYvX17Y9hQ3AAA2d7vuumuefvrpdaoD2ke7BuM/+tGPcuihh6Z3794fWVNTU5OamprC9n777Zf+/fvn1ltvzde//vWPPK6ioiIVFRWt2i8AALSmWbNmJUlOO+20IndSXN27dy92C8DHmD17dnr37p0tt9wyNTU1GT9+fLbffvuPrB8/fnyuvPLKduwQAAA2bl/96lfXKRj/6le/2g7dAEk7BuOvvPJKHn744UycOLFFx22xxRbZe++989JLL7VRZwAA0D5GjBiRJOnXr1+6dOnS7tefOXNmjj/++Nx1113p379/u18/+UsovssuuxTl2sC6GTx4cCZMmJDddtst8+fPz5VXXpkhQ4ZkxowZH/mLLZ7iBgAAzT322GPrXLe5/wI9tJd2C8Zvv/329OjRI4cffniLjmtsbMxzzz2Xww47rI06AwCA9rHNNtvk1FNPLXYb6d+/f/bZZ59itwFspA499NDC13vssUcGDx6cHXbYIffee29OOeWUNR7jKW4AANDcz372s3Wuu/POO9u4GyBJOrTHRVatWpXbb789o0aNSseOzbP4E088MePGjStsX3XVVfn1r3+dP//5z3n22Wdz/PHH55VXXtko/gERAAAANjdbbbVVdt11V09yAwCAFli+fHmr1gEbrl2C8Ycffjjz5s1b43sS5s2bl/nz5xe233nnnZx22mnp379/DjvssDQ0NOSpp57K7rvv3h6tAgAAAB+wZMmSvPzyy+nVq1exWwEAAID11i6PUj/44IPT1NS0xrGpU6c2277uuuty3XXXtUNXAAAAwF+74IIL8sUvfjE77LBDXn/99Vx++eUpLy/PMcccU+zWAAAAYL212zvGAQAAgI3fa6+9lmOOOSZvvfVWtt122xxwwAF5+umns+222xa7NQAAAFhvgnEAAACg4Cc/+UmxW4CNUtnK97J3dYd0XvSn5PV2eTvhRqfzoj9l7+oOKVv5XrFbAQCAFhOMAwAAAMDH2HLJvDx7RrfksTOSx4rdTXH0T/LsGd0yc8m8JPsVux0AAGgRwTgAAAAAfIz3um2ffW5dkrvvvjv9+/UrdjtFMXPWrBx33HH50WHbF7sVAABoMcE4AAAAAHyMpo5b5vd1q7Jsq12T3nsVu52iWFa3Kr+vW5WmjlsWuxUAAGixzfOFSAAAAAAAAABsNgTjAAAAAAAAAJQ0wTgAAAAAAAAAJU0wDgAAAAAAAEBJ61jsBgAAAABgY/fuu+8mSZ599tmi9bBs2bLMnTs3O+64Yzp37tzu1585c2a7XxMAAFqLYBwAAAAAPsasWbOSJKeddlqROym+7t27F7sFAABoMcE4AAAAAHyMESNGJEn69euXLl26FKWHmTNn5vjjj89dd92V/v37F6WH7t27Z5dddinKtQEAYEMIxgEAAADgY2yzzTY59dRTi91GkqR///7ZZ599it0GAABsUgTjAAAAAAAAsBbvvvtu4dUqre3ZZ59d59piPr0GNnWCcQBgndx444259tprU1dXlz333DPf//7387nPfe4j63/2s5/la1/7WubOnZtddtkl3/rWt3LYYYe1Y8cAAACw+Wrpz/HA2s2aNSuDBg1qk3O35LzTpk3z5BhYT4JxAOBj/fSnP83YsWNzyy23ZPDgwfne976X4cOH58UXX0yPHj0+VP/UU0/lmGOOyfjx43PEEUfknnvuyYgRI/Lss89mwIABRbgDAAAA2Hy09Od42FzMnj07ixcvXq9jly1blrvuumud648//vh1rm3JeZctW9aiFeYf1L179+yyyy7rdSyUAsE4APCxvvvd7+a0007LySefnCS55ZZb8sADD+THP/5x/uVf/uVD9ddff30OOeSQXHjhhUmSr3/963nooYdyww035JZbbmnX3gEAAGBz09Kf42Fz8Mdpv81JR+zXbtfbu7rDOtd+54IT27CT5u79zfT07T+w3a4HGxPBOGxmNvQ9KDNnzmz25/ryHhTYdKxYsSLTpk3LuHHjCvs6dOiQgw46KLW1tWs8pra2NmPHjm22b/jw4Zk0adIa65cvX57ly5cXthsaGja8cShB5nEA2LSZy4H20NKf4/1Mzubi5d8+mGfP6FbsNopuXsPcJIJxNk+CcdjMtNZ7UFryGJg18R4U2HS8+eabaWxsTM+ePZvt79mz50f+o15dXd0a6+vq6tZYP378+Fx55ZWt0zCUMPM4AGzazOVAe2jpz/F+JmdzMeQfTsnPf57suOOO2XLLLVt8/Jw5c3LppZe2QWct841vfCM77bTTeh3btWvXbL/3ga3cEWw62jwYv+KKKz40qe62225r/e3Yn/3sZ/na176WuXPnZpdddsm3vvWtHHbYYW3dKmwW+vXrl2nTpq338cuWLcvcuXOz4447pnPnzhvUB8Bq48aNa7bCvKGhIX369CliR7BxMo8DwKbNXA5sjPxMzuZim1598g9nX7Hex+/w7rv54d7D1+vYNf1i3Pr+fwJPfoH11y4rxj/96U/n4Ycf/r+Ldvzoyz711FM55phjMn78+BxxxBG55557MmLEiDz77LMZMGBAe7QLJa1Lly4b/Fvh+++/fyt1A2wKttlmm5SXl2fBggXN9i9YsCDV1dVrPKa6urpF9RUVFamoqGidhqGEmccBYNNmLgfaQ0t/jvczOaybDZnHm5qaWrkbYH10aI+LdOzYMdXV1YXPNtts85G1119/fQ455JBceOGF6d+/f77+9a9nn332yQ033NAerQIAf6VTp04ZNGhQpkyZUti3atWqTJkyJTU1NWs8pqampll9kjz00EMfWQ8AAAC0jvX5OR4ANgftEozPnj07vXv3zqc+9akcd9xxmTdv3kfW1tbW5qCDDmq2b/jw4amtrV3rNZYvX56GhoZmHwCgdYwdOzY/+MEPcscdd2TmzJk566yzsnTp0px88slJkhNPPDHjxo0r1P/zP/9zJk+enO985zuZNWtWrrjiijzzzDMZM2ZMsW4BAAAANhsf93M8AGyO2vxR6oMHD86ECROy2267Zf78+bnyyiszZMiQzJgxI927d/9QfV1dXXr27NlsX8+ePVNXV7fW64wfP/5D7zIHAFrHV77ylbzxxhu57LLLUldXl7322iuTJ08uzNnz5s1Lhw7/9/t2++23X+65555ceumlueSSS7LLLrtk0qRJXosCAAAA7eDjfo4HgM1RWVM7v9hg0aJF2WGHHfLd7343p5xyyofGO3XqlDvuuCPHHHNMYd9NN92UK6+88kPvRPmg5cuXZ/ny5YXthoaG9OnTJ/X19amsrGzdmwCAVtbQ0JCqqirz1v/P9wOATYl568N8TwDYlJi3mvP9AGBT0pJ5q81XjP+1rbbaKrvuumteeumlNY5XV1d/KABfsGBBqqur13reioqKVFRUtFqfAAAAAAAAAJSGdnnH+ActWbIkL7/8cnr16rXG8ZqamkyZMqXZvoceeig1NTXt0R4AAAAAAAAAJabNg/ELLrggjz76aObOnZunnnoq//AP/5Dy8vLCo9JPPPHEjBs3rlD/z//8z5k8eXK+853vZNasWbniiivyzDPPZMyYMW3dKgAAAAAAAAAlqM0fpf7aa6/lmGOOyVtvvZVtt902BxxwQJ5++ulsu+22SZJ58+alQ4f/y+f322+/3HPPPbn00ktzySWXZJdddsmkSZMyYMCAFl139avTGxoaWu9mAKCNrJ6vVs9fmzvzOACbEvP4h5nLAdiUmMubM48DsClpyTxe1lSis/1rr72WPn36FLsNAGiRV199Ndttt12x2yg68zgAmyLz+P8xlwOwKTKX/4V5HIBN0brM4yUbjK9atSqvv/56unfvnrKysmK3AyWjoaEhffr0yauvvprKyspitwMlo6mpKYsXL07v3r2bPUllc2Ueh7ZhHoe2YR7/MHM5tA1zObQNc3lz5nFoG+ZxaBstmcdLNhgH2kZDQ0OqqqpSX19v8gaATYx5HAA2beZyANh0mceh+Pz6GwAAAAAAAAAlTTAOAAAAAAAAQEkTjAMtUlFRkcsvvzwVFRXFbgUAaCHzOABs2szlALDpMo9D8XnHOAAAAAAAAAAlzYpxAAAAAAAAAEqaYBwAAAAAAACAkiYYBwAAAAAAAKCkCcYBAAAAAAAAKGmCcWCdPPbYY/niF7+Y3r17p6ysLJMmTSp2SwDAOjKPA8CmzVwOAJsu8zhsPATjwDpZunRp9txzz9x4443FbgUAaCHzOABs2szlALDpMo/DxqNjsRsANg2HHnpoDj300GK3AQCsB/M4AGzazOUAsOkyj8PGw4pxAAAAAAAAAEqaYBwAAAAAAACAkiYYBwAAAAAAAKCkCcYBAAAAAAAAKGmCcQAAAAAAAABKWsdiNwBsGpYsWZKXXnqpsD1nzpxMnz49W2+9dbbffvsidgYAfBzzOABs2szlALDpMo/DxqOsqampqdhNABu/qVOnZtiwYR/aP2rUqEyYMKH9GwIA1pl5HAA2beZyANh0mcdh4yEYBwAAAAAAAKCkecc4AAAAAAAAACVNMA4AAAAAAABASROMAwAAAAAAAFDSBOMAAAAAAAAAlDTBOAAAAAAAAAAlTTAOAAAAAAAAQEkTjAMAAAAAAABQ0gTjAAAAAAAAAJQ0wTgAAAAAAAAAJU0wDgAAAAAAAEBJE4wDAAAAAAAAUNIE4wAAAAAAAACUNME4AAAAAAAAACVNMA4AAAAAAABASROMAwAAAAAAAFDSBOMAAAAAAAAAlDTBOAAAAAAAAAAlTTAOAAAAAAAAQEkTjANFMXTo0AwdOrTYbXysK664ImVlZXnzzTeL3QoAAAAAAADrSTAOkOTqq6/OpEmTit0GAAAAAAAAbUAwDhDBOAAAAAAAQCkTjAMAAAAAAABQ0gTjsA5eeeWVnH322dltt93SuXPnfPKTn8w//uM/Zu7cuR+q/eMf/5i//du/TefOnbPddtvlG9/4Rm6//faUlZV9qP7BBx/MkCFD0rVr13Tv3j2HH354nn/++Rb3t3z58lx++eXp27dvKioq0qdPn1x00UVZvnx5s7qysrKMGTMmP/vZz7L77runc+fOqampyXPPPZckufXWW9O3b99sueWWGTp06If6HTp0aAYMGJBp06Zlv/32S+fOnbPTTjvllltuaXHPrXEfkyZNyoABA1JRUZFPf/rTmTx58ofOOXXq1HzmM5/JlltumZ133jm33npr4b3hHzzf0qVLc8cdd6SsrCxlZWU56aSTmp1n0aJFOemkk7LVVlulqqoqJ598ct59991WuW8AAAAAAADaVsdiNwCbgt/97nd56qmncvTRR2e77bbL3Llzc/PNN2fo0KF54YUX0qVLlyTJ//7v/2bYsGEpKyvLuHHj0rVr1/zwhz9MRUXFh8555513ZtSoURk+fHi+9a1v5d13383NN9+cAw44IL///e+z4447rlNvq1atyt///d/niSeeyOmnn57+/fvnueeey3XXXZc//elPH3o8+OOPP55f/vKXGT16dJJk/PjxOeKII3LRRRflpptuytlnn5133nkn11xzTb761a/mN7/5TbPj33nnnRx22GH58pe/nGOOOSb33ntvzjrrrHTq1Clf/epXW/7NXc/7eOKJJzJx4sScffbZ6d69e/7t3/4tRx11VObNm5dPfvKTSZLf//73OeSQQ9KrV69ceeWVaWxszFVXXZVtt9222bnuvPPOnHrqqfnc5z6X008/PUmy8847N6v58pe/nJ122injx4/Ps88+mx/+8Ifp0aNHvvWtb633PQMAAAAAANA+ypqampqK3QRs7JYtW5bOnTs32/f000+npqYm//7v/54TTjghSfJP//RPueGGG/Lss89mr732SpK8/fbb2WWXXfL2229nzpw52XHHHbNkyZL06dMn//iP/5jbbrutcM4FCxZkt912y5e//OVm+9fmrrvuyqhRo/Loo4/mgAMOKOy/9dZbc+aZZ+bJJ5/Mfvvtl+QvK6MrKioya9asQvB+22235Ywzzkh1dXX+9Kc/pXv37kmSSy65JOPHjy/0nPxlxfijjz6a73znOxk7dmySZMWKFRk8eHBef/31vPbaa9liiy3Wqe+hQ4cm+cuK7vW5j06dOuWFF14oBNh//OMfs+eee+b73/9+xowZkyT5+7//+0yZMiWzZ89O7969kyQvvfRS+vfvn5UrV+aDf/1169YtI0eOzIQJE5r1ecUVV+TKK6/MV7/61fzoRz8q7D/yyCPz2GOP5c0331yn+wUAAAAAAKB4PEod1sEHQ/H3338/b731Vvr27Zutttoqzz77bGFs8uTJqampKYTiSbL11lvnuOOOa3a+hx56KIsWLcoxxxyTN998s/ApLy/P4MGD88gjj6xzbz/72c/Sv3//9OvXr9m5/u7v/i5JPnSuAw88sNlq9MGDBydJjjrqqEIo/sH9f/7zn5sd37Fjx5xxxhmF7U6dOuWMM87IwoULM23atHXue0Pv46CDDmq2qnuPPfZIZWVlod/GxsY8/PDDGTFiRCEUT5K+ffvm0EMPbXF/Z555ZrPtIUOG5K233kpDQ0OLzwUAAAAAAED78ih1WAfLli3L+PHjc/vtt+d///d/m600rq+vL3z9yiuvpKam5kPH9+3bt9n27Nmzk6QQ+v61ysrKde5t9uzZmTlz5oceD77awoULm21vv/32zbarqqqSJH369Fnj/nfeeafZ/t69e6dr167N9u26665Jkrlz52bfffdd594/aEPvI0k+8YlPFPpduHBhli1b9qHvffLh/x7r4q+v94lPfCLJX74/LfnvBQAAAAAAQPsTjMM6OOecc3L77bfn3HPPTU1NTaqqqlJWVpajjz46q1atavH5Vh9z5513prq6+kPjHTuu+/80V61alYEDB+a73/3uGsf/OvAuLy9fY91H7W+vty201n20Vb/F/v4AAAAAAACw/gTjsA7uu+++jBo1Kt/5zncK+957770sWrSoWd0OO+yQl1566UPH//W+1Y8A79GjRw466KAN6m3nnXfOH/7whxx44IEpKyvboHOti9dffz1Lly5ttmr8T3/6U5I0e0R7S7X2ffTo0SNbbrnlOv33SNIu3zsAAAAAAACKwzvGYR2Ul5d/aGXw97///TQ2NjbbN3z48NTW1mb69OmFfW+//XbuvvvuD9VVVlbm6quvzvvvv/+h673xxhvr3NuXv/zl/O///m9+8IMffGhs2bJlWbp06Tqfa12sXLkyt956a2F7xYoVufXWW7Pttttm0KBB633e1r6P8vLyHHTQQZk0aVJef/31wv6XXnopDz744Ifqu3bt+qFfdAAAAAAAAKA0WDEO6+CII47InXfemaqqquy+++6pra3Nww8/nE9+8pPN6i666KLcdddd+cIXvpBzzjknXbt2zQ9/+MNsv/32efvttwurkisrK3PzzTfnhBNOyD777JOjjz462267bebNm5cHHngg+++/f2644YZ16u2EE07IvffemzPPPDOPPPJI9t9//zQ2NmbWrFm5995786tf/Sqf+cxnWu170bt373zrW9/K3Llzs+uuu+anP/1ppk+fnttuuy1bbLHFep+3Le7jiiuuyK9//evsv//+Oeuss9LY2JgbbrghAwYMaPbLC0kyaNCgPPzww/nud7+b3r17Z6eddsrgwYPX+34AAAAAAADYeAjGYR1cf/31KS8vz91335333nsv+++/fx5++OEMHz68WV2fPn3yyCOP5J/+6Z9y9dVXZ9ttt83o0aPTtWvX/NM//VO23HLLQu2xxx6b3r1755vf/GauvfbaLF++PH/zN3+TIUOG5OSTT17n3jp06JBJkybluuuuy7//+7/n5z//ebp06ZJPfepT+ed//ufsuuuurfZ9SJJPfOITueOOO3LOOefkBz/4QXr27Jkbbrghp5122gadty3uY9CgQXnwwQdzwQUX5Gtf+1r69OmTq666KjNnzsysWbOa1X73u9/N6aefnksvvTTLli3LqFGjBOMAAAAAAAAloqzpr58PDbS6c889N7feemuWLFmS8vLyYrez3oYOHZo333wzM2bMKHYrG2TEiBF5/vnnM3v27GK3AgAAAAAAQDvwjnFoZcuWLWu2/dZbb+XOO+/MAQccsEmH4puqv/7vMXv27Pz3f/93hg4dWpyGAAAAAAAAaHcepQ6trKamJkOHDk3//v2zYMGC/OhHP0pDQ0O+9rWvteg8K1asyNtvv73WmqqqqnTu3HlD2m11b7zxRhobGz9yvFOnTtl6663brZ9PfepTOemkk/KpT30qr7zySm6++eZ06tQpF110Ubv1AAAAAAAAQHEJxqGVHXbYYbnvvvty2223paysLPvss09+9KMf5fOf/3yLzvPUU09l2LBha625/fbbc9JJJ21At63vs5/9bF555ZWPHP/bv/3bTJ06td36OeSQQ/If//EfqaurS0VFRWpqanL11Vdnl112abceAAAAAAAAKC7vGIeN1DvvvJNp06attebTn/50evXq1U4drZsnn3zyQ48v/6BPfOITGTRoUDt2BAAAAAAAwOZOMA4AAAAAAABASSvZR6mvWrUqr7/+erp3756ysrJitwMAa9XU1JTFixend+/e6dChQ7HbAQAAAACAklKywfjrr7+ePn36FLsNAGiRV199Ndttt12x2wAAAAAAgJJSssF49+7dk/wlYKisrCxyNwCwdg0NDenTp09h/gIAAAAAAFpPyQbjqx+fXllZKRgHYJPh9R8AAAAAAND6vMQUAAAAAAAAgJLWomD85ptvzh577FFYhV1TU5MHH3ywMD506NCUlZU1+5x55pnNzjFv3rwcfvjh6dKlS3r06JELL7wwK1eubFYzderU7LPPPqmoqEjfvn0zYcKE9b9DAAAAAAAAADZrLXqU+nbbbZdvfvOb2WWXXdLU1JQ77rgjX/rSl/L73/8+n/70p5Mkp512Wq666qrCMV26dCl83djYmMMPPzzV1dV56qmnMn/+/Jx44onZYostcvXVVydJ5syZk8MPPzxnnnlm7r777kyZMiWnnnpqevXqleHDh7fGPQMAAAAAAACwGSlrampq2pATbL311rn22mtzyimnZOjQodlrr73yve99b421Dz74YI444oi8/vrr6dmzZ5LklltuycUXX5w33ngjnTp1ysUXX5wHHnggM2bMKBx39NFHZ9GiRZk8efJH9rF8+fIsX768sN3Q0JA+ffqkvr7eO8ahlTQ2Nubxxx/P/Pnz06tXrwwZMiTl5eXFbgtKQkNDQ6qqqsxbAAAAAADQBtb7HeONjY35yU9+kqVLl6ampqaw/+67784222yTAQMGZNy4cXn33XcLY7W1tRk4cGAhFE+S4cOHp6GhIc8//3yh5qCDDmp2reHDh6e2tnat/YwfPz5VVVWFT58+fdb31oA1mDhxYvr27Zthw4bl2GOPzbBhw9K3b99MnDix2K0BAAAAAADAWrU4GH/uuefSrVu3VFRU5Mwzz8zPf/7z7L777kmSY489NnfddVceeeSRjBs3LnfeeWeOP/74wrF1dXXNQvEkhe26urq11jQ0NGTZsmUf2de4ceNSX19f+Lz66qstvTXgI0ycODEjR47MwIEDU1tbm8WLFxd+0WXkyJHCcQAAAAAAADZqLXrHeJLstttumT59eurr63Pfffdl1KhRefTRR7P77rvn9NNPL9QNHDgwvXr1yoEHHpiXX345O++8c6s2/tcqKipSUVHRpteAzVFjY2POP//8HHHEEZk0aVI6dPjL79Psu+++mTRpUkaMGJELLrggX/rSlzxWHQAAAAAAgI1Si1eMd+rUKX379s2gQYMyfvz47Lnnnrn++uvXWDt48OAkyUsvvZQkqa6uzoIFC5rVrN6urq5ea01lZWU6d+7c0naBDfT4449n7ty5ueSSSwqh+GodOnTIuHHjMmfOnDz++ONF6hAAAAAAAADWbr3fMb7aqlWrsnz58jWOTZ8+PUnSq1evJElNTU2ee+65LFy4sFDz0EMPpbKysvA49pqamkyZMqXZeR566KFm7zEH2s/8+fOTJAMGDFjj+Or9q+sAAAAAAABgY9OiYHzcuHF57LHHMnfu3Dz33HMZN25cpk6dmuOOOy4vv/xyvv71r2fatGmZO3dufvnLX+bEE0/M5z//+eyxxx5JkoMPPji77757TjjhhPzhD3/Ir371q1x66aUZPXp04THoZ555Zv785z/noosuyqxZs3LTTTfl3nvvzXnnndf6dw98rNW/2DJjxow1jq/ev7oOAAAAAAAANjZlTU1NTetafMopp2TKlCmZP39+qqqqsscee+Tiiy/OF77whbz66qs5/vjjM2PGjCxdujR9+vTJP/zDP+TSSy9NZWVl4RyvvPJKzjrrrEydOjVdu3bNqFGj8s1vfjMdO/7f686nTp2a8847Ly+88EK22267fO1rX8tJJ53UohtraGhIVVVV6uvrm10faJnGxsb07ds3AwcObPaO8eQvT4wYMWJEZsyYkdmzZ3vHOGwA8xYAAAAAALSdFgXjmxIBA7SeiRMnZuTIkTniiCMybty4DBgwIDNmzMj48eNz//3357777suRRx5Z7DZhk2beAgAAAACAttPx40uAzd2RRx6Z++67L+eff37222+/wv6ddtpJKA4AAAAAAMBGz4pxYJ01Njbm8ccfz/z589OrV68MGTLE49OhlZi3AAAAAACg7VgxDqyz8vLyDB06tNhtAAAAAAAAQIt0KHYDAAAAAAAAANCWBOMAAAAAAAAAlDTBOAAAAAAAAAAlzTvGgXXW2NiYxx9/PPPnz0+vXr0yZMiQlJeXF7stAAAAAAAAWCsrxoF1MnHixPTt2zfDhg3Lsccem2HDhqVv376ZOHFisVsDAAAAAACAtRKMAx9r4sSJGTlyZAYOHJja2tosXrw4tbW1GThwYEaOHCkcBwAAAAAAYKNW1tTU1FTsJtpCQ0NDqqqqUl9fn8rKymK3A5usxsbG9O3bNwMHDsykSZPSocP//T7NqlWrMmLEiMyYMSOzZ8/2WHXYAOYtAAAAAABoO1aMA2v1+OOPZ+7cubnkkkuaheJJ0qFDh4wbNy5z5szJ448/XqQOAQAAAAAAYO0E48BazZ8/P0kyYMCANY6v3r+6DgAAAAAAADY2gnFgrXr16pUkmTFjxhrHV+9fXQcAAAAAAAAbG8E4sFZDhgzJjjvumKuvvjqrVq1qNrZq1aqMHz8+O+20U4YMGVKkDgEAAAAAAGDtBOPAWpWXl+c73/lO7r///owYMSK1tbVZvHhxamtrM2LEiNx///359re/nfLy8mK3CgAAAAAAAGvUsdgNABu/I488Mvfdd1/OP//87LfffoX9O+20U+67774ceeSRRewOAAAAAAAA1q6sqampqdhNtIWGhoZUVVWlvr4+lZWVxW4HSkJjY2Mef/zxzJ8/P7169cqQIUOsFIdWYt4CAAAAAIC2Y8U4sM7Ky8szdOjQYrcBAAAAAAAALeId4wAAAAAAAACUNME4AAAAAAAAACWtRcH4zTffnD322COVlZWprKxMTU1NHnzwwcL4e++9l9GjR+eTn/xkunXrlqOOOioLFixodo558+bl8MMPT5cuXdKjR49ceOGFWblyZbOaqVOnZp999klFRUX69u2bCRMmrP8dAgAAAAAAALBZa1Ewvt122+Wb3/xmpk2blmeeeSZ/93d/ly996Ut5/vnnkyTnnXde/uu//is/+9nP8uijj+b111/PkUceWTi+sbExhx9+eFasWJGnnnoqd9xxRyZMmJDLLrusUDNnzpwcfvjhGTZsWKZPn55zzz03p556an71q1+10i0DAAAAAAAAsDkpa2pqatqQE2y99da59tprM3LkyGy77ba55557MnLkyCTJrFmz0r9//9TW1mbffffNgw8+mCOOOCKvv/56evbsmSS55ZZbcvHFF+eNN95Ip06dcvHFF+eBBx7IjBkzCtc4+uijs2jRokyePHmd+2poaEhVVVXq6+tTWVm5IbcIAG3OvAUAAAAAAG1nvd8x3tjYmJ/85CdZunRpampqMm3atLz//vs56KCDCjX9+vXL9ttvn9ra2iRJbW1tBg4cWAjFk2T48OFpaGgorDqvra1tdo7VNavP8VGWL1+ehoaGZh8AAAAAAAAAaHEw/txzz6Vbt26pqKjImWeemZ///OfZfffdU1dXl06dOmWrrbZqVt+zZ8/U1dUlSerq6pqF4qvHV4+traahoSHLli37yL7Gjx+fqqqqwqdPnz4tvTUAAAAAAAAASlCLg/Hddtst06dPz29/+9ucddZZGTVqVF544YW26K1Fxo0bl/r6+sLn1VdfLXZLAAAAAAAAAGwEOrb0gE6dOqVv375JkkGDBuV3v/tdrr/++nzlK1/JihUrsmjRomarxhcsWJDq6uokSXV1df7nf/6n2fkWLFhQGFv95+p9H6yprKxM586dP7KvioqKVFRUtPR2AAAAAAAAAChx6/2O8dVWrVqV5cuXZ9CgQdliiy0yZcqUwtiLL76YefPmpaamJklSU1OT5557LgsXLizUPPTQQ6msrMzuu+9eqPngOVbXrD4HAAAAAAAAALREi1aMjxs3Loceemi23377LF68OPfcc0+mTp2aX/3qV6mqqsopp5ySsWPHZuutt05lZWXOOeec1NTUZN99902SHHzwwdl9991zwgkn5JprrkldXV0uvfTSjB49urDa+8wzz8wNN9yQiy66KF/96lfzm9/8Jvfee28eeOCB1r97AAAAAAAAAEpei4LxhQsX5sQTT8z8+fNTVVWVPfbYI7/61a/yhS98IUly3XXXpUOHDjnqqKOyfPnyDB8+PDfddFPh+PLy8tx///0566yzUlNTk65du2bUqFG56qqrCjU77bRTHnjggZx33nm5/vrrs9122+WHP/xhhg8f3kq3DAAAAAAAAMDmpKypqamp2E20hYaGhlRVVaW+vj6VlZXFbgcA1sq8BQAAAAAAbWeD3zEOAAAAAAAAABszwTgAAAAAAAAAJU0wDgAAAAAAAEBJE4wDAAAAAAAAUNIE4wAAAAAAAACUNME4AAAAAAAAACVNMA4AAAAAAABASetY7AaATUdjY2Mef/zxzJ8/P7169cqQIUNSXl5e7LYAAAAAAABgrawYB9bJxIkT07dv3wwbNizHHntshg0blr59+2bixInFbg0AAAAAAADWSjAOfKyJEydm5MiRGThwYGpra7N48eLU1tZm4MCBGTlypHAcAAAAAACAjVpZU1NTU7GbaAsNDQ2pqqpKfX19Kisri90ObLIaGxvTt2/fDBw4MJMmTUqHDv/3+zSrVq3KiBEjMmPGjMyePdtj1WEDmLcAAAAAAKDtWDEOrNXjjz+euXPn5pJLLmkWiidJhw4dMm7cuMyZMyePP/54kToEAAAAAACAtROMA2s1f/78JMmAAQPWOL56/+o6AAAAAAAA2NgIxoG16tWrV5JkxowZaxxfvX91HQAAAAAAAGxsvGMcWKsPvmP83nvvzS233JKXX345O++8c84888x8+ctf9o5xaAXmLQAAAAAAaDsdi90AsHErLy/Pd77znRx11FHp0qVLPvi7NGPHjk1TU1P+8z//UygOAAAAAADARsuj1IGP9fTTTydJysrKmu3v0KFDs3EAAAAAAADYGHmUOrBWK1asSNeuXfPJT34yr7zySmprazN//vz06tUrNTU12WGHHfLWW29l6dKl6dSpU7HbhU2WeQsAAAAAANqOFePAWt10001ZuXJlvvGNb6SioiJDhw7NMccck6FDh6aioiJXXXVVVq5cmZtuuqnYrQIAAAAAAMAaCcaBtXr55ZeTJEccccQax1fvX10HAAAAAAAAGxvBOLBWO++8c5Lk/vvvX+P46v2r6wAAAAAAAGBj06JgfPz48fnsZz+b7t27p0ePHhkxYkRefPHFZjVDhw5NWVlZs8+ZZ57ZrGbevHk5/PDD06VLl/To0SMXXnhhVq5c2axm6tSp2WeffVJRUZG+fftmwoQJ63eHwAY5++yz07Fjx1x66aUf+t/pypUrc9lll6Vjx445++yzi9QhAAAAAAAArF2LgvFHH300o0ePztNPP52HHnoo77//fg4++OAsXbq0Wd1pp52W+fPnFz7XXHNNYayxsTGHH354VqxYkaeeeip33HFHJkyYkMsuu6xQM2fOnBx++OEZNmxYpk+fnnPPPTennnpqfvWrX23g7QIt1alTp5x33nlZsGBBtttuu9x22215/fXXc9ttt2W77bbLggULct5556VTp07FbhUAAAAAAADWqKypqalpfQ9+44030qNHjzz66KP5/Oc/n+QvK8b32muvfO9731vjMQ8++GCOOOKIvP766+nZs2eS5JZbbsnFF1+cN954I506dcrFF1+cBx54IDNmzCgcd/TRR2fRokWZPHnyOvXW0NCQqqqq1NfXp7Kycn1vEfj/XXTRRbnuuuuarRrv2LFjzjvvvGa//AKsH/MWAAAAAAC0nQ16x3h9fX2SZOutt262/+67784222yTAQMGZNy4cXn33XcLY7W1tRk4cGAhFE+S4cOHp6GhIc8//3yh5qCDDmp2zuHDh6e2tvYje1m+fHkaGhqafYDWc80112Tp0qW57rrrMmbMmFx33XVZunSpUBwAAAAAAICNXsf1PXDVqlU599xzs//++2fAgAGF/ccee2x22GGH9O7dO3/84x9z8cUX58UXX8zEiROTJHV1dc1C8SSF7bq6urXWNDQ0ZNmyZencufOH+hk/fnyuvPLK9b0dYB106tQp5557brHbAAAAAAAAgBZZ72B89OjRmTFjRp544olm+08//fTC1wMHDkyvXr1y4IEH5uWXX87OO++8/p1+jHHjxmXs2LGF7YaGhvTp06fNrgcAAAAAAADApmG9gvExY8bk/vvvz2OPPZbtttturbWDBw9Okrz00kvZeeedU11dnf/5n/9pVrNgwYIkSXV1deHP1fs+WFNZWbnG1eJJUlFRkYqKivW5HWAdNTY25vHHH8/8+fPTq1evDBkyJOXl5cVuCwAAAAAAANaqRe8Yb2pqypgxY/Lzn/88v/nNb7LTTjt97DHTp09PkvTq1StJUlNTk+eeey4LFy4s1Dz00EOprKzM7rvvXqiZMmVKs/M89NBDqampaUm7QCuaOHFi+vbtm2HDhuXYY4/NsGHD0rdv38JrEgAAAAAAAGBj1aJgfPTo0bnrrrtyzz33pHv37qmrq0tdXV2WLVuWJHn55Zfz9a9/PdOmTcvcuXPzy1/+MieeeGI+//nPZ4899kiSHHzwwdl9991zwgkn5A9/+EN+9atf5dJLL83o0aMLK77PPPPM/PnPf85FF12UWbNm5aabbsq9996b8847r5VvH1gXEydOzMiRIzNw4MDU1tZm8eLFqa2tzcCBAzNy5EjhOAAAAAAAABu1sqampqZ1Li4rW+P+22+/PSeddFJeffXVHH/88ZkxY0aWLl2aPn365B/+4R9y6aWXprKyslD/yiuv5KyzzsrUqVPTtWvXjBo1Kt/85jfTseP/Pdl96tSpOe+88/LCCy9ku+22y9e+9rWcdNJJ63xjDQ0NqaqqSn19fbNrAy3T2NiYvn37ZuDAgZk0aVI6dPi/36dZtWpVRowYkRkzZmT27Nkeqw4bwLwFAAAAAABtp0XB+KZEwACtY+rUqRk2bFhqa2uz7777fmi8trY2++23Xx555JEMHTq0/RuEEmHeAgAAAACAttOiR6kDm5/58+cnSQYMGLDG8dX7V9cBAAAAAADAxkYwDqxVr169kiQzZsxY4/jq/avrAAAAAAAAYGMjGAfWasiQIdlxxx1z9dVXZ9WqVc3GVq1alfHjx2ennXbKkCFDitQhAAAAAAAArJ1gHFir8vLyfOc738n999+fESNGpLa2NosXL05tbW1GjBiR+++/P9/+9rdTXl5e7FYBAAAAAABgjToWuwFg43fkkUfmvvvuy/nnn5/99tuvsH+nnXbKfffdlyOPPLKI3QEAAAAAAMDalTU1NTUVu4m20NDQkKqqqtTX16eysrLY7UBJaGxszOOPP5758+enV69eGTJkiJXi0ErMWwAAAAAA0HasGAfWWXl5eYYOHVrsNgAAAAAAAKBFvGMcAAAAAAAAgJJmxTiwzjxKHQAAAAAAgE2RFePAOpk4cWL69u2bYcOG5dhjj82wYcPSt2/fTJw4sditAQAAAAAAwFoJxoGPNXHixIwcOTILFixotn/BggUZOXKkcBwAAAAAAICNmmAcWKvGxsacddZZaWpqyoEHHpja2tosXrw4tbW1OfDAA9PU1JSzzjorjY2NxW4VAAAAAAAA1kgwDqzV1KlTs3DhwhxwwAH5xS9+kX333TfdunXLvvvum1/84hfZf//9s3DhwkydOrXYrQIAAAAAAMAaCcaBtVodeF955ZXp0KH5XxkdOnTIFVdc0awOAAAAAAAANjaCcQAAAAAAAABKmmAcWKuhQ4cmSS6//PKsWrWq2diqVaty5ZVXNqsDAAAAAACAjY1gHFiroUOHZtttt80TTzyRL33pS6mtrc3ixYtTW1ubL33pS3niiSfSo0cPwTgAAAAAAAAbrY7FbgDYuJWXl+eWW27JUUcdlSlTpuT+++8vjHXp0iVJcvPNN6e8vLxYLQIAAAAAAMBaWTEOfKwjjzwy//mf/5kePXo029+jR4/853/+Z4488sgidQYAAAAAAAAfr6ypqamp2E20hYaGhlRVVaW+vj6VlZXFbgdKwooVK3LTTTfl5Zdfzs4775yzzz47nTp1KnZbUBLMWwAAAAAA0HY8Sh1YJxMnTsz555+fuXPnFvZdf/31+c53vmPFOAAAAAAAABu1Fj1Kffz48fnsZz+b7t27p0ePHhkxYkRefPHFZjXvvfdeRo8enU9+8pPp1q1bjjrqqCxYsKBZzbx583L44YenS5cu6dGjRy688MKsXLmyWc3UqVOzzz77pKKiIn379s2ECRPW7w6BDTZx4sSMHDkyAwYMyI033pgf//jHufHGGzNgwICMHDkyEydOLHaLAAAAAAAA8JFa9Cj1Qw45JEcffXQ++9nPZuXKlbnkkksyY8aMvPDCC+natWuS5KyzzsoDDzyQCRMmpKqqKmPGjEmHDh3y5JNPJkkaGxuz1157pbq6Otdee23mz5+fE088MaeddlquvvrqJMmcOXMyYMCAnHnmmTn11FMzZcqUnHvuuXnggQcyfPjwderVI2mhdTQ2NqZv377ZZptt8sYbb+SVV14pjO2www7Zdttt89Zbb2X27NkpLy8vYqewaTNvAQAAAABA29mgd4y/8cYb6dGjRx599NF8/vOfT319fbbddtvcc889GTlyZJJk1qxZ6d+/f2pra7PvvvvmwQcfzBFHHJHXX389PXv2TJLccsstufjii/PGG2+kU6dOufjii/PAAw9kxowZhWsdffTRWbRoUSZPnrxOvQkYoHVMnTo1w4YNS5J88YtfzCWXXJIBAwZkxowZufrqq/Nf//VfSZJHHnkkQ4cOLWKnsGkzbwEAAAAAQNtp0aPU/1p9fX2SZOutt06STJs2Le+//34OOuigQk2/fv2y/fbbp7a2NklSW1ubgQMHFkLxJBk+fHgaGhry/PPPF2o+eI7VNavPsSbLly9PQ0NDsw+w4f73f/83SXLooYdm0qRJ2XfffdOtW7fsu+++mTRpUg499NBmdQAAAAAAALCxWe9gfNWqVTn33HOz//77Z8CAAUmSurq6dOrUKVtttVWz2p49e6aurq5Q88FQfPX46rG11TQ0NGTZsmVr7Gf8+PGpqqoqfPr06bO+twZ8wBtvvJEkOfLII9OhQ/O/Mjp06JARI0Y0qwMAAAAAAICNzXoH46NHj86MGTPyk5/8pDX7WW/jxo1LfX194fPqq68WuyUoCdtuu22SZOLEiVm1alWzsVWrVmXSpEnN6gAAAAAAAGBjs17B+JgxY3L//ffnkUceyXbbbVfYX11dnRUrVmTRokXN6hcsWJDq6upCzYIFCz40vnpsbTWVlZXp3LnzGnuqqKhIZWVlsw+w4f7mb/4mSTJ58uSMGDEitbW1Wbx4cWprazNixIhMnjy5WR0AAAAAAABsbFoUjDc1NWXMmDH5+c9/nt/85jfZaaedmo0PGjQoW2yxRaZMmVLY9+KLL2bevHmpqalJktTU1OS5557LwoULCzUPPfRQKisrs/vuuxdqPniO1TWrzwG0nyFDhmTHHXfMoEGD8txzz2W//fZLZWVl9ttvv8yYMSODBg3KTjvtlCFDhhS7VQAAAAAAAFijsqampqZ1LT777LNzzz335Be/+EV22223wv6qqqrCSu6zzjor//3f/50JEyaksrIy55xzTpLkqaeeSpI0NjZmr732Su/evXPNNdekrq4uJ5xwQk499dRcffXVSZI5c+ZkwIABGT16dL761a/mN7/5Tf7pn/4pDzzwQIYPH75OvTY0NKSqqir19fVWj8MGmjhxYkaOHJnDDz88hxxySDp37pxly5Zl8uTJeeCBB3LfffflyCOPLHabsEkzbwEAAAAAQNtpUTBeVla2xv233357TjrppCTJe++9l/PPPz//8R//keXLl2f48OG56aabCo9JT5JXXnklZ511VqZOnZquXbtm1KhR+eY3v5mOHTsWaqZOnZrzzjsvL7zwQrbbbrt87WtfK1xjXQgYoHVNnDgx5513XubNm1fYt8MOO+S73/2uUBxagXkLAAAAAADaTouC8U2JgAFa10UXXZTrrrsuK1euLOzr2LFjzjvvvFxzzTVF7AxKg3kLAAAAAADaTsePLwE2dxdddFGuvfba9OzZMyeccEI+9alP5c9//nPuvPPOXHvttUkiHAcAAAAAAGCjZcU4sFYrVqxI165d07Vr11RVVTV7lPr222+f+vr6LF26NEuXLk2nTp2K2Cls2sxbAAAAAADQdjoUuwFg43bTTTdl5cqVqa+vz5577pna2tosXrw4tbW12XPPPVNfX5+VK1fmpptuKnarAAAAAAAAsEaCcWCtZs+enST5whe+kHvvvTdPP/10xo0bl6effjr33ntvvvCFLzSrAwAAAAAAgI2Nd4wDa1VWVpbkL4957tatWxobGwtjF1xwQfbZZ59mdQAAAAAAALCxsWIcWKvBgwcnSX772982C8WTpLGxMb/73e+a1QEAAAAAAMDGRjAOrFXPnj1btQ4AAAAAAADam2AcWKs//OEPha//+nHpH9z+YB0AAAAAAABsTLxjHFirJ598svD1IYccks6dO2fRokXZaqutsmzZsjz44IOFugsvvLBYbQIAAAAAAMBHEowDa/Xuu+8mST7zmc/koYceysqVKwtjHTt2zKBBgzJt2rRCHQAAAAAAAGxsBOPAWq0OxJ955pkcdthhOfzww9O5c+csW7YsDzzwQP77v/+7UAcAAAAAAAAbI+8YB9Zq6NChha+feeaZdOzYMcOHD0/Hjh3zzDPPrLEOAAAAAAAANiZWjANrVV5eXvh64cKFOeOMMwrbZWVla6wDAAAAAACAjYkV48BaLVy4sPB1586dm41tueWWa6wDAAAAAACAjYlgHFirXr16JUnGjx+fHj16NBvr2bNnrr766mZ1AAAAAAAAsLEpa2pqaip2E22hoaEhVVVVqa+vT2VlZbHbgU1WY2Nj+vbtm2222SYLFy7MvHnzCmPbb799evTokbfeeiuzZ8/2OHXYAOYtAAAAAABoO1aMA2tVXl6ef/zHf8wzzzyT1157rdnYa6+9lmeeeSYjR44UigMAAAAAALDREowDa9XY2JgJEyYkSSoqKpqNrd6+44470tjY2N6tAQAAAAAAwDoRjANrNXXq1Lzxxhs54IADUl9fn0ceeST33HNPHnnkkdTX1+eAAw7IwoULM3Xq1GK3CgAAAAAAAGskGAfWanXgfeWVV6apqSnTp0/PU089lenTp6epqSmXX355szoAAAAAAADY2HQsdgPApuHWW2/NwQcf3OyR6RdccEGOOuqoInYFAAAAAAAAH6/FK8Yfe+yxfPGLX0zv3r1TVlaWSZMmNRs/6aSTUlZW1uxzyCGHNKt5++23c9xxx6WysjJbbbVVTjnllCxZsqRZzR//+McMGTIkW265Zfr06ZNrrrmm5XcHbLChQ4cmSe69994PvUe8sbEx9957b7M6AAAAAAAA2Ni0OBhfunRp9txzz9x4440fWXPIIYdk/vz5hc9//Md/NBs/7rjj8vzzz+ehhx7K/fffn8ceeyynn356YbyhoSEHH3xwdthhh0ybNi3XXnttrrjiitx2220tbRfYQPvtt1/h6/Ly8vTu3TvV1dXp3bt3ysvL11gHAAAAAAAAG5MWP0r90EMPzaGHHrrWmoqKilRXV69xbObMmZk8eXJ+97vf5TOf+UyS5Pvf/34OO+ywfPvb307v3r1z9913Z8WKFfnxj3+cTp065dOf/nSmT5+e7373u80C9A9avnx5li9fXthuaGho6a0Ba3DDDTcUvm5sbMzrr7/+kXUXXnhhe7UFAAAAAAAA66zFK8bXxdSpU9OjR4/stttuOeuss/LWW28Vxmpra7PVVlsVQvEkOeigg9KhQ4f89re/LdR8/vOfT6dOnQo1w4cPz4svvph33nlnjdccP358qqqqCp8+ffq0xa3BZucXv/hFq9YBAAAAAABAe2v1YPyQQw7Jv//7v2fKlCn51re+lUcffTSHHnpo4d3EdXV16dGjR7NjOnbsmK233jp1dXWFmp49ezarWb29uuavjRs3LvX19YXPq6++2tq3BpullStXtmodAAAAAAAAtLcWP0r94xx99NGFrwcOHJg99tgjO++8c6ZOnZoDDzywtS9XUFFRkYqKijY7P2yu5s+f32z7hBNOyAUXXJBvf/vbufPOOz+yDgAAAAAAADYWbfIo9Q/61Kc+lW222SYvvfRSkqS6ujoLFy5sVrNy5cq8/fbbhfeSV1dXZ8GCBc1qVm9/1LvLgbbxwZXg2267bQ444IBss802OeCAA7LtttuusQ4AAAAAAAA2Jq2+Yvyvvfbaa3nrrbfSq1evJElNTU0WLVqUadOmZdCgQUmS3/zmN1m1alUGDx5cqPl//+//5f33388WW2yRJHnooYey22675ROf+ERbtwx8wLJlywpfv/HGGznjjDM+tg4AAAAAAAA2Ji1eMb5kyZJMnz4906dPT5LMmTMn06dPz7x587JkyZJceOGFefrppzN37txMmTIlX/rSl9K3b98MHz48SdK/f/8ccsghOe200/I///M/efLJJzNmzJgcffTR6d27d5Lk2GOPTadOnXLKKafk+eefz09/+tNcf/31GTt2bOvdObBO1vaUhrKysnWqAwAAAAAAgGJqcTD+zDPPZO+9987ee++dJBk7dmz23nvvXHbZZSkvL88f//jH/P3f/3123XXXnHLKKRk0aFAef/zxZu//vvvu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"},"metadata":{}}]},{"cell_type":"code","source":"from scipy import stats\nimport numpy as np\nimport pandas as pd\n\ndef remove_outliers(df: pd.DataFrame, cols: list[str], beta: float, cols_2: list[str] = None, beta2: float = None):\n    # Avoid deep copy unless truly needed to optimize memory usage\n    df_filtered = df.copy()\n    beta_dict = {col: beta2 if cols_2 and col in cols_2 and beta2 is not None else (6.0 if col == 'person_income' else beta) for col in cols}\n\n    for col in cols:\n        data = df_filtered[col]\n        \n        if data.empty:\n            print(f\"Column {col} is empty, skipping...\")\n            continue\n        \n        # Use pandas quantile for faster percentile calculation\n        iqr = stats.iqr(data)\n        q1, q3 = data.quantile(0.25), data.quantile(0.75)\n        beta_val = beta_dict[col]\n        \n        print(f'{col} - beta: {beta_val}')\n        outlier_low = q1 - beta_val * iqr\n        outlier_high = q3 + beta_val * iqr\n        df_filtered = df_filtered[(data >= outlier_low) & (data <= outlier_high)]\n        \n    return df_filtered\n\n# Run with specified parameters\ndf_clean = remove_outliers(train_df, num_cols, beta=1.5, cols_2=['loan_amnt'], beta2=3.0)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:37.159803Z","iopub.execute_input":"2024-10-30T05:44:37.161085Z","iopub.status.idle":"2024-10-30T05:44:37.351587Z","shell.execute_reply.started":"2024-10-30T05:44:37.161020Z","shell.execute_reply":"2024-10-30T05:44:37.349993Z"},"trusted":true},"execution_count":14,"outputs":[{"name":"stdout","text":"person_age - beta: 1.5\nperson_income - beta: 6.0\nperson_emp_length - beta: 1.5\nloan_amnt - beta: 3.0\nloan_int_rate - beta: 1.5\nloan_percent_income - beta: 1.5\ncb_person_cred_hist_length - beta: 1.5\nincome_to_loan_ratio - beta: 1.5\nage_emp_length - beta: 1.5\n","output_type":"stream"}]},{"cell_type":"code","source":"def ins(indexx, clean_desc, orig_desc):\n    # Fetch the row for the current index without extra conversions\n    clean_values = clean_desc.loc[indexx].values\n    orig_values = orig_desc.loc[indexx].values\n    diff = orig_values - clean_values\n    # Create DataFrame once for both sets of values\n    res_df = pd.DataFrame({\n        'orig': orig_values, \n        'clean': clean_values,\n        'difference':diff\n    }, index=num_cols)\n    print(res_df.sort_values(by=['difference'], ascending=False, key= lambda x: abs(x)))\n\n# Compute describe() once for both DataFrames\nclean_desc = df_clean[num_cols].describe()\norig_desc = train_df[num_cols].describe()\n\n# Loop through the index values\nfor index in ['count', 'mean', 'std', 'min', 'max']:\n    \n    print(f'\\t\\t\\t{index.upper()}')\n    print('*' * 50)\n    ins(index, clean_desc, orig_desc)  # Pass precomputed descriptions\n    print('-' * 50)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:37.353496Z","iopub.execute_input":"2024-10-30T05:44:37.354032Z","iopub.status.idle":"2024-10-30T05:44:37.503154Z","shell.execute_reply.started":"2024-10-30T05:44:37.353960Z","shell.execute_reply":"2024-10-30T05:44:37.501716Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"\t\t\tCOUNT\n**************************************************\n                               orig    clean  difference\nperson_age                  91226.0  71837.0     19389.0\nperson_income               91226.0  71837.0     19389.0\nperson_emp_length           91226.0  71837.0     19389.0\nloan_amnt                   91226.0  71837.0     19389.0\nloan_int_rate               91226.0  71837.0     19389.0\nloan_percent_income         91226.0  71837.0     19389.0\ncb_person_cred_hist_length  91226.0  71837.0     19389.0\nincome_to_loan_ratio        91226.0  71837.0     19389.0\nage_emp_length              91226.0  71837.0     19389.0\n--------------------------------------------------\n\t\t\tMEAN\n**************************************************\n                                    orig         clean   difference\nperson_income               64770.706224  60952.458510  3818.247714\nloan_amnt                    9350.348607   9421.238289   -70.889683\nage_emp_length                133.941506    104.215770    29.725735\nincome_to_loan_ratio            9.574152      7.807111     1.767041\nperson_age                     27.616480     26.013893     1.602587\ncb_person_cred_hist_length      5.810219      4.768713     1.041506\nperson_emp_length               4.727320      4.028469     0.698851\nloan_int_rate                  10.790508     10.806692    -0.016184\nloan_percent_income             0.163154      0.166789    -0.003635\n--------------------------------------------------\n\t\t\tSTD\n**************************************************\n                                    orig         clean    difference\nperson_income               47936.961097  30190.895873  17746.065224\nloan_amnt                    5848.605423   5360.337100    488.268323\nage_emp_length                133.698910     78.217900     55.481010\nincome_to_loan_ratio           12.088803      4.226138      7.862665\nperson_age                      6.148115      3.896902      2.251213\ncb_person_cred_hist_length      4.038412      2.706606      1.331805\nperson_emp_length               4.006739      2.944659      1.062080\nloan_int_rate                   3.057312      3.026299      0.031012\nloan_percent_income             0.097491      0.084070      0.013421\n--------------------------------------------------\n\t\t\tMIN\n**************************************************\n                               orig    clean  difference\nperson_income               4000.00  4080.00       -80.0\nperson_age                    20.00    20.00         0.0\nperson_emp_length              0.00     0.00         0.0\nloan_amnt                    500.00   500.00         0.0\nloan_int_rate                  5.42     5.42         0.0\nloan_percent_income            0.00     0.00         0.0\ncb_person_cred_hist_length     2.00     2.00         0.0\nincome_to_loan_ratio           0.32     0.32         0.0\nage_emp_length                 0.00     0.00         0.0\n--------------------------------------------------\n\t\t\tMAX\n**************************************************\n                                    orig      clean    difference\nperson_income               6.000000e+06  294000.00  5.706000e+06\nage_emp_length              3.444000e+03     333.00  3.111000e+03\nloan_amnt                   3.500000e+04   33000.00  2.000000e+03\nincome_to_loan_ratio        1.266667e+03      21.00  1.245667e+03\nperson_emp_length           1.230000e+02      14.00  1.090000e+02\nperson_age                  1.440000e+02      40.00  1.040000e+02\ncb_person_cred_hist_length  3.000000e+01      13.00  1.700000e+01\nloan_int_rate               2.322000e+01      20.62  2.600000e+00\nloan_percent_income         8.300000e-01       0.41  4.200000e-01\n--------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"cat_cols = [col for col in df_clean.select_dtypes(exclude=['int', 'float']).columns if col not in ('id', 'loan_status')]\nnum_cols = [col for col in df_clean.select_dtypes(include=['int', 'float']).columns if col not in ('id', 'loan_status')]\n\ncat_cols, num_cols","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:37.504705Z","iopub.execute_input":"2024-10-30T05:44:37.505133Z","iopub.status.idle":"2024-10-30T05:44:37.519409Z","shell.execute_reply.started":"2024-10-30T05:44:37.505090Z","shell.execute_reply":"2024-10-30T05:44:37.518156Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(['person_home_ownership',\n  'loan_intent',\n  'loan_grade',\n  'cb_person_default_on_file'],\n ['person_age',\n  'person_income',\n  'person_emp_length',\n  'loan_amnt',\n  'loan_int_rate',\n  'loan_percent_income',\n  'cb_person_cred_hist_length',\n  'income_to_loan_ratio',\n  'age_emp_length'])"},"metadata":{}}]},{"cell_type":"code","source":"for col in cat_cols:\n    print(df_clean[col].value_counts())\n    print()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:37.520982Z","iopub.execute_input":"2024-10-30T05:44:37.521453Z","iopub.status.idle":"2024-10-30T05:44:37.554806Z","shell.execute_reply.started":"2024-10-30T05:44:37.521402Z","shell.execute_reply":"2024-10-30T05:44:37.553482Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"person_home_ownership\nRENT        38784\nMORTGAGE    28496\nOWN          4398\nOTHER         159\nName: count, dtype: int64\n\nloan_intent\nEDUCATION            15485\nMEDICAL              13413\nVENTURE              12276\nPERSONAL             11918\nDEBTCONSOLIDATION    11394\nHOMEIMPROVEMENT       7351\nName: count, dtype: int64\n\nloan_grade\nA    24758\nB    24473\nC    13877\nD     6869\nE     1553\nF      261\nG       46\nName: count, dtype: int64\n\ncb_person_default_on_file\nN    60408\nY    11429\nName: count, dtype: int64\n\n","output_type":"stream"}]},{"cell_type":"code","source":"df_temp = df_clean[['person_home_ownership', 'loan_intent', 'loan_status']]\ndef generate_new_features(df:pd.DataFrame, feature_cols:list[str]=None):\n    new_cols = []\n    if feature_cols is None or len(feature_cols) != 2  :\n        print('provide the 2 feature cols to create new features')\n        return \n    df = df.copy()\n    agg_sums = df.groupby([feature_cols[0], feature_cols[1]]).loan_status.sum().sort_values(ascending=False)\n    print(agg_sums)\n    \n    min_sum_count = int(input('enter the minimum sum count for to create a combination of the features: '))\n    filtered_indices = agg_sums[agg_sums >= min_sum_count].index\n    \n    print(f'creating new features from combinations of top {len(filtered_indices)} features: ')\n    for index in filtered_indices:\n        new_col = f'{index[0]}_{index[1]}'\n#         print(f'creating new column {new_col}:')\n        df[new_col] = ((df[feature_cols[0]] == str(index[0])) & (df[feature_cols[1]] == str(index[1]))).astype(int)\n        new_cols.append(new_col)\n    return df, new_cols\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:37.556537Z","iopub.execute_input":"2024-10-30T05:44:37.557772Z","iopub.status.idle":"2024-10-30T05:44:37.570239Z","shell.execute_reply.started":"2024-10-30T05:44:37.557724Z","shell.execute_reply":"2024-10-30T05:44:37.569172Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"import itertools\nfrom IPython.display import clear_output\ndf_temp_2 = df_clean.copy()\nnew_features = []\nfor col_pair in itertools.combinations(cat_cols, 2):\n    df_temp_2, new_cols = generate_new_features(df=df_temp_2, feature_cols=col_pair)\n    new_features.extend(new_cols)\ndf_temp_2.columns","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:44:37.571772Z","iopub.execute_input":"2024-10-30T05:44:37.572222Z","iopub.status.idle":"2024-10-30T05:45:24.034239Z","shell.execute_reply.started":"2024-10-30T05:44:37.572181Z","shell.execute_reply":"2024-10-30T05:45:24.032903Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"person_home_ownership  loan_intent      \nRENT                   MEDICAL              1976\n                       DEBTCONSOLIDATION    1818\n                       EDUCATION            1568\n                       PERSONAL             1540\n                       HOMEIMPROVEMENT      1229\n                       VENTURE              1197\nMORTGAGE               MEDICAL               690\n                       DEBTCONSOLIDATION     671\n                       HOMEIMPROVEMENT       335\n                       EDUCATION             300\n                       PERSONAL              297\n                       VENTURE               118\nOWN                    MEDICAL                43\n                       HOMEIMPROVEMENT        31\n                       EDUCATION              27\n                       PERSONAL               26\n                       VENTURE                25\n                       DEBTCONSOLIDATION      24\nOTHER                  MEDICAL                10\n                       PERSONAL               10\n                       DEBTCONSOLIDATION       7\n                       HOMEIMPROVEMENT         5\n                       EDUCATION               5\n                       VENTURE                 3\nName: loan_status, dtype: int64\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"enter the minimum sum count for to create a combination of the features:  600\n"},{"name":"stdout","text":"creating new features from combinations of top 8 features: \nperson_home_ownership  loan_grade\nRENT                   D             3168\n                       B             2375\n                       C             1670\n                       A             1224\nMORTGAGE               D              937\nRENT                   E              746\nMORTGAGE               C              475\n                       B              433\n                       A              294\n                       E              203\nRENT                   F              122\nOWN                    A               55\nMORTGAGE               F               51\nOWN                    B               33\n                       E               33\n                       C               27\n                       D               23\nRENT                   G               23\nMORTGAGE               G               18\nOTHER                  D               13\n                       C                9\n                       B                8\n                       E                6\nOWN                    F                5\nOTHER                  F                2\n                       G                1\n                       A                1\nOWN                    G                0\nName: loan_status, dtype: int64\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"enter the minimum sum count for to create a combination of the features:  900\n"},{"name":"stdout","text":"creating new features from combinations of top 5 features: \nperson_home_ownership  cb_person_default_on_file\nRENT                   N                            6457\n                       Y                            2871\nMORTGAGE               N                            1572\n                       Y                             839\nOWN                    N                             131\n                       Y                              45\nOTHER                  N                              24\n                       Y                              16\nName: loan_status, dtype: int64\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"enter the minimum sum count for to create a combination of the features:  1000\n"},{"name":"stdout","text":"creating new features from combinations of top 3 features: \nloan_intent        loan_grade\nMEDICAL            D             1100\nDEBTCONSOLIDATION  D             1090\nMEDICAL            B              564\nPERSONAL           D              561\n                   B              559\nEDUCATION          B              539\nDEBTCONSOLIDATION  B              506\nHOMEIMPROVEMENT    D              506\nVENTURE            D              443\nEDUCATION          D              441\nMEDICAL            C              434\nEDUCATION          C              398\nHOMEIMPROVEMENT    B              395\nDEBTCONSOLIDATION  C              390\nHOMEIMPROVEMENT    C              348\nEDUCATION          A              337\nMEDICAL            A              316\nPERSONAL           C              313\nVENTURE            C              298\nPERSONAL           A              292\nVENTURE            B              286\nDEBTCONSOLIDATION  A              279\nMEDICAL            E              241\nHOMEIMPROVEMENT    A              204\nDEBTCONSOLIDATION  E              202\nEDUCATION          E              155\nVENTURE            E              149\n                   A              146\nHOMEIMPROVEMENT    E              122\nPERSONAL           E              119\nMEDICAL            F               53\nDEBTCONSOLIDATION  F               47\nEDUCATION          F               25\nHOMEIMPROVEMENT    F               22\nPERSONAL           F               18\nVENTURE            F               15\nMEDICAL            G               11\nPERSONAL           G               11\nVENTURE            G                6\nDEBTCONSOLIDATION  G                6\nEDUCATION          G                5\nHOMEIMPROVEMENT    G                3\nName: loan_status, dtype: int64\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"enter the minimum sum count for to create a combination of the features:  300\n"},{"name":"stdout","text":"creating new features from combinations of top 18 features: \nloan_intent        cb_person_default_on_file\nMEDICAL            N                            1826\nDEBTCONSOLIDATION  N                            1669\nEDUCATION          N                            1390\nPERSONAL           N                            1337\nHOMEIMPROVEMENT    N                            1071\nMEDICAL            Y                             893\nVENTURE            N                             891\nDEBTCONSOLIDATION  Y                             851\nPERSONAL           Y                             536\nHOMEIMPROVEMENT    Y                             529\nEDUCATION          Y                             510\nVENTURE            Y                             452\nName: loan_status, dtype: int64\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"enter the minimum sum count for to create a combination of the features:  1000\n"},{"name":"stdout","text":"creating new features from combinations of top 5 features: \nloan_grade  cb_person_default_on_file\nB           N                            2849\nD           Y                            2130\n            N                            2011\nA           N                            1574\nC           N                            1139\n            Y                            1042\nE           N                             503\n            Y                             485\nF           Y                              93\n            N                              87\nG           N                              21\n            Y                              21\nA           Y                               0\nB           Y                               0\nName: loan_status, dtype: int64\n","output_type":"stream"},{"output_type":"stream","name":"stdin","text":"enter the minimum sum count for to create a combination of the features:  500\n"},{"name":"stdout","text":"creating new features from combinations of top 7 features: \n","output_type":"stream"},{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"Index(['person_age', 'person_income', 'person_home_ownership',\n       'person_emp_length', 'loan_intent', 'loan_grade', 'loan_amnt',\n       'loan_int_rate', 'loan_percent_income', 'cb_person_default_on_file',\n       'cb_person_cred_hist_length', 'loan_status', 'income_to_loan_ratio',\n       'age_emp_length', 'RENT_MEDICAL', 'RENT_DEBTCONSOLIDATION',\n       'RENT_EDUCATION', 'RENT_PERSONAL', 'RENT_HOMEIMPROVEMENT',\n       'RENT_VENTURE', 'MORTGAGE_MEDICAL', 'MORTGAGE_DEBTCONSOLIDATION',\n       'RENT_D', 'RENT_B', 'RENT_C', 'RENT_A', 'MORTGAGE_D', 'RENT_N',\n       'RENT_Y', 'MORTGAGE_N', 'MEDICAL_D', 'DEBTCONSOLIDATION_D', 'MEDICAL_B',\n       'PERSONAL_D', 'PERSONAL_B', 'EDUCATION_B', 'DEBTCONSOLIDATION_B',\n       'HOMEIMPROVEMENT_D', 'VENTURE_D', 'EDUCATION_D', 'MEDICAL_C',\n       'EDUCATION_C', 'HOMEIMPROVEMENT_B', 'DEBTCONSOLIDATION_C',\n       'HOMEIMPROVEMENT_C', 'EDUCATION_A', 'MEDICAL_A', 'PERSONAL_C',\n       'MEDICAL_N', 'DEBTCONSOLIDATION_N', 'EDUCATION_N', 'PERSONAL_N',\n       'HOMEIMPROVEMENT_N', 'B_N', 'D_Y', 'D_N', 'A_N', 'C_N', 'C_Y', 'E_N'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"df_temp_2.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.035875Z","iopub.execute_input":"2024-10-30T05:45:24.036245Z","iopub.status.idle":"2024-10-30T05:45:24.071441Z","shell.execute_reply.started":"2024-10-30T05:45:24.036208Z","shell.execute_reply":"2024-10-30T05:45:24.070163Z"},"trusted":true},"execution_count":20,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 71837 entries, 1 to 32293\nData columns (total 60 columns):\n #   Column                      Non-Null Count  Dtype  \n---  ------                      --------------  -----  \n 0   person_age                  71837 non-null  float64\n 1   person_income               71837 non-null  float64\n 2   person_home_ownership       71837 non-null  object \n 3   person_emp_length           71837 non-null  float64\n 4   loan_intent                 71837 non-null  object \n 5   loan_grade                  71837 non-null  object \n 6   loan_amnt                   71837 non-null  float64\n 7   loan_int_rate               71837 non-null  float64\n 8   loan_percent_income         71837 non-null  float64\n 9   cb_person_default_on_file   71837 non-null  object \n 10  cb_person_cred_hist_length  71837 non-null  float64\n 11  loan_status                 71837 non-null  int64  \n 12  income_to_loan_ratio        71837 non-null  float64\n 13  age_emp_length              71837 non-null  float64\n 14  RENT_MEDICAL                71837 non-null  int64  \n 15  RENT_DEBTCONSOLIDATION      71837 non-null  int64  \n 16  RENT_EDUCATION              71837 non-null  int64  \n 17  RENT_PERSONAL               71837 non-null  int64  \n 18  RENT_HOMEIMPROVEMENT        71837 non-null  int64  \n 19  RENT_VENTURE                71837 non-null  int64  \n 20  MORTGAGE_MEDICAL            71837 non-null  int64  \n 21  MORTGAGE_DEBTCONSOLIDATION  71837 non-null  int64  \n 22  RENT_D                      71837 non-null  int64  \n 23  RENT_B                      71837 non-null  int64  \n 24  RENT_C                      71837 non-null  int64  \n 25  RENT_A                      71837 non-null  int64  \n 26  MORTGAGE_D                  71837 non-null  int64  \n 27  RENT_N                      71837 non-null  int64  \n 28  RENT_Y                      71837 non-null  int64  \n 29  MORTGAGE_N                  71837 non-null  int64  \n 30  MEDICAL_D                   71837 non-null  int64  \n 31  DEBTCONSOLIDATION_D         71837 non-null  int64  \n 32  MEDICAL_B                   71837 non-null  int64  \n 33  PERSONAL_D                  71837 non-null  int64  \n 34  PERSONAL_B                  71837 non-null  int64  \n 35  EDUCATION_B                 71837 non-null  int64  \n 36  DEBTCONSOLIDATION_B         71837 non-null  int64  \n 37  HOMEIMPROVEMENT_D           71837 non-null  int64  \n 38  VENTURE_D                   71837 non-null  int64  \n 39  EDUCATION_D                 71837 non-null  int64  \n 40  MEDICAL_C                   71837 non-null  int64  \n 41  EDUCATION_C                 71837 non-null  int64  \n 42  HOMEIMPROVEMENT_B           71837 non-null  int64  \n 43  DEBTCONSOLIDATION_C         71837 non-null  int64  \n 44  HOMEIMPROVEMENT_C           71837 non-null  int64  \n 45  EDUCATION_A                 71837 non-null  int64  \n 46  MEDICAL_A                   71837 non-null  int64  \n 47  PERSONAL_C                  71837 non-null  int64  \n 48  MEDICAL_N                   71837 non-null  int64  \n 49  DEBTCONSOLIDATION_N         71837 non-null  int64  \n 50  EDUCATION_N                 71837 non-null  int64  \n 51  PERSONAL_N                  71837 non-null  int64  \n 52  HOMEIMPROVEMENT_N           71837 non-null  int64  \n 53  B_N                         71837 non-null  int64  \n 54  D_Y                         71837 non-null  int64  \n 55  D_N                         71837 non-null  int64  \n 56  A_N                         71837 non-null  int64  \n 57  C_N                         71837 non-null  int64  \n 58  C_Y                         71837 non-null  int64  \n 59  E_N                         71837 non-null  int64  \ndtypes: float64(9), int64(47), object(4)\nmemory usage: 33.4+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in cat_cols:\n    print(col, df_temp_2[col].unique())","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.072930Z","iopub.execute_input":"2024-10-30T05:45:24.073308Z","iopub.status.idle":"2024-10-30T05:45:24.099466Z","shell.execute_reply.started":"2024-10-30T05:45:24.073271Z","shell.execute_reply":"2024-10-30T05:45:24.098083Z"},"trusted":true},"execution_count":21,"outputs":[{"name":"stdout","text":"person_home_ownership ['OWN' 'RENT' 'MORTGAGE' 'OTHER']\nloan_intent ['MEDICAL' 'PERSONAL' 'VENTURE' 'EDUCATION' 'DEBTCONSOLIDATION'\n 'HOMEIMPROVEMENT']\nloan_grade ['C' 'A' 'B' 'D' 'E' 'F' 'G']\ncb_person_default_on_file ['N' 'Y']\n","output_type":"stream"}]},{"cell_type":"code","source":"df_temp_2['cb_person_default_on_file'] = df_temp_2['cb_person_default_on_file'].map(lambda x: 1 if x == 'Y' else 0)\ndf_temp_2[cat_cols].head()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.100855Z","iopub.execute_input":"2024-10-30T05:45:24.101286Z","iopub.status.idle":"2024-10-30T05:45:24.149198Z","shell.execute_reply.started":"2024-10-30T05:45:24.101246Z","shell.execute_reply":"2024-10-30T05:45:24.147999Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"  person_home_ownership loan_intent loan_grade  cb_person_default_on_file\n1                   OWN     MEDICAL          C                          0\n2                   OWN    PERSONAL          A                          0\n4                  RENT     MEDICAL          A                          0\n5                  RENT     VENTURE          A                          0\n6              MORTGAGE   EDUCATION          A                          0","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>person_home_ownership</th>\n      <th>loan_intent</th>\n      <th>loan_grade</th>\n      <th>cb_person_default_on_file</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>1</th>\n      <td>OWN</td>\n      <td>MEDICAL</td>\n      <td>C</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>OWN</td>\n      <td>PERSONAL</td>\n      <td>A</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>RENT</td>\n      <td>MEDICAL</td>\n      <td>A</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>RENT</td>\n      <td>VENTURE</td>\n      <td>A</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>MORTGAGE</td>\n      <td>EDUCATION</td>\n      <td>A</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"cat_cols.remove('cb_person_default_on_file')\ncat_cols","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.153036Z","iopub.execute_input":"2024-10-30T05:45:24.153523Z","iopub.status.idle":"2024-10-30T05:45:24.161300Z","shell.execute_reply.started":"2024-10-30T05:45:24.153480Z","shell.execute_reply":"2024-10-30T05:45:24.159775Z"},"trusted":true},"execution_count":23,"outputs":[{"execution_count":23,"output_type":"execute_result","data":{"text/plain":"['person_home_ownership', 'loan_intent', 'loan_grade']"},"metadata":{}}]},{"cell_type":"code","source":"for col in cat_cols:\n    print(col, df_temp_2[col].unique())\n    ","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.163171Z","iopub.execute_input":"2024-10-30T05:45:24.163686Z","iopub.status.idle":"2024-10-30T05:45:24.187280Z","shell.execute_reply.started":"2024-10-30T05:45:24.163629Z","shell.execute_reply":"2024-10-30T05:45:24.185924Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"person_home_ownership ['OWN' 'RENT' 'MORTGAGE' 'OTHER']\nloan_intent ['MEDICAL' 'PERSONAL' 'VENTURE' 'EDUCATION' 'DEBTCONSOLIDATION'\n 'HOMEIMPROVEMENT']\nloan_grade ['C' 'A' 'B' 'D' 'E' 'F' 'G']\n","output_type":"stream"}]},{"cell_type":"code","source":"from sklearn.preprocessing import OrdinalEncoder, OneHotEncoder\n\nordencoder = OrdinalEncoder()\ndf_temp_2['loan_grade'] = ordencoder.fit_transform(df_temp_2[['loan_grade']])\ndf_temp_2['loan_grade'].unique()\ncat_cols.remove('loan_grade')","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.189071Z","iopub.execute_input":"2024-10-30T05:45:24.189567Z","iopub.status.idle":"2024-10-30T05:45:24.220142Z","shell.execute_reply.started":"2024-10-30T05:45:24.189513Z","shell.execute_reply":"2024-10-30T05:45:24.218741Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"category_mapping = {category: code for category, code in zip(ordencoder.categories_[0], range(len(ordencoder.categories_[0])))}\nprint(category_mapping)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.221588Z","iopub.execute_input":"2024-10-30T05:45:24.221993Z","iopub.status.idle":"2024-10-30T05:45:24.229096Z","shell.execute_reply.started":"2024-10-30T05:45:24.221953Z","shell.execute_reply":"2024-10-30T05:45:24.227625Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"{'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5, 'G': 6}\n","output_type":"stream"}]},{"cell_type":"code","source":"df_temp_2 = pd.get_dummies(data=df_temp_2, columns=cat_cols)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.230566Z","iopub.execute_input":"2024-10-30T05:45:24.230979Z","iopub.status.idle":"2024-10-30T05:45:24.322173Z","shell.execute_reply.started":"2024-10-30T05:45:24.230924Z","shell.execute_reply":"2024-10-30T05:45:24.320887Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"bool_cols = df_temp_2.select_dtypes('bool').columns\ndf_temp_2[bool_cols] = df_temp_2[bool_cols].astype(int)\ndf_temp_2.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.327008Z","iopub.execute_input":"2024-10-30T05:45:24.327425Z","iopub.status.idle":"2024-10-30T05:45:24.360415Z","shell.execute_reply.started":"2024-10-30T05:45:24.327385Z","shell.execute_reply":"2024-10-30T05:45:24.358817Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nIndex: 71837 entries, 1 to 32293\nData columns (total 68 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   person_age                      71837 non-null  float64\n 1   person_income                   71837 non-null  float64\n 2   person_emp_length               71837 non-null  float64\n 3   loan_grade                      71837 non-null  float64\n 4   loan_amnt                       71837 non-null  float64\n 5   loan_int_rate                   71837 non-null  float64\n 6   loan_percent_income             71837 non-null  float64\n 7   cb_person_default_on_file       71837 non-null  int64  \n 8   cb_person_cred_hist_length      71837 non-null  float64\n 9   loan_status                     71837 non-null  int64  \n 10  income_to_loan_ratio            71837 non-null  float64\n 11  age_emp_length                  71837 non-null  float64\n 12  RENT_MEDICAL                    71837 non-null  int64  \n 13  RENT_DEBTCONSOLIDATION          71837 non-null  int64  \n 14  RENT_EDUCATION                  71837 non-null  int64  \n 15  RENT_PERSONAL                   71837 non-null  int64  \n 16  RENT_HOMEIMPROVEMENT            71837 non-null  int64  \n 17  RENT_VENTURE                    71837 non-null  int64  \n 18  MORTGAGE_MEDICAL                71837 non-null  int64  \n 19  MORTGAGE_DEBTCONSOLIDATION      71837 non-null  int64  \n 20  RENT_D                          71837 non-null  int64  \n 21  RENT_B                          71837 non-null  int64  \n 22  RENT_C                          71837 non-null  int64  \n 23  RENT_A                          71837 non-null  int64  \n 24  MORTGAGE_D                      71837 non-null  int64  \n 25  RENT_N                          71837 non-null  int64  \n 26  RENT_Y                          71837 non-null  int64  \n 27  MORTGAGE_N                      71837 non-null  int64  \n 28  MEDICAL_D                       71837 non-null  int64  \n 29  DEBTCONSOLIDATION_D             71837 non-null  int64  \n 30  MEDICAL_B                       71837 non-null  int64  \n 31  PERSONAL_D                      71837 non-null  int64  \n 32  PERSONAL_B                      71837 non-null  int64  \n 33  EDUCATION_B                     71837 non-null  int64  \n 34  DEBTCONSOLIDATION_B             71837 non-null  int64  \n 35  HOMEIMPROVEMENT_D               71837 non-null  int64  \n 36  VENTURE_D                       71837 non-null  int64  \n 37  EDUCATION_D                     71837 non-null  int64  \n 38  MEDICAL_C                       71837 non-null  int64  \n 39  EDUCATION_C                     71837 non-null  int64  \n 40  HOMEIMPROVEMENT_B               71837 non-null  int64  \n 41  DEBTCONSOLIDATION_C             71837 non-null  int64  \n 42  HOMEIMPROVEMENT_C               71837 non-null  int64  \n 43  EDUCATION_A                     71837 non-null  int64  \n 44  MEDICAL_A                       71837 non-null  int64  \n 45  PERSONAL_C                      71837 non-null  int64  \n 46  MEDICAL_N                       71837 non-null  int64  \n 47  DEBTCONSOLIDATION_N             71837 non-null  int64  \n 48  EDUCATION_N                     71837 non-null  int64  \n 49  PERSONAL_N                      71837 non-null  int64  \n 50  HOMEIMPROVEMENT_N               71837 non-null  int64  \n 51  B_N                             71837 non-null  int64  \n 52  D_Y                             71837 non-null  int64  \n 53  D_N                             71837 non-null  int64  \n 54  A_N                             71837 non-null  int64  \n 55  C_N                             71837 non-null  int64  \n 56  C_Y                             71837 non-null  int64  \n 57  E_N                             71837 non-null  int64  \n 58  person_home_ownership_MORTGAGE  71837 non-null  int64  \n 59  person_home_ownership_OTHER     71837 non-null  int64  \n 60  person_home_ownership_OWN       71837 non-null  int64  \n 61  person_home_ownership_RENT      71837 non-null  int64  \n 62  loan_intent_DEBTCONSOLIDATION   71837 non-null  int64  \n 63  loan_intent_EDUCATION           71837 non-null  int64  \n 64  loan_intent_HOMEIMPROVEMENT     71837 non-null  int64  \n 65  loan_intent_MEDICAL             71837 non-null  int64  \n 66  loan_intent_PERSONAL            71837 non-null  int64  \n 67  loan_intent_VENTURE             71837 non-null  int64  \ndtypes: float64(10), int64(58)\nmemory usage: 37.8 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"df_temp_2.describe()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.361694Z","iopub.execute_input":"2024-10-30T05:45:24.362117Z","iopub.status.idle":"2024-10-30T05:45:24.777681Z","shell.execute_reply.started":"2024-10-30T05:45:24.362078Z","shell.execute_reply":"2024-10-30T05:45:24.776541Z"},"trusted":true},"execution_count":29,"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"         person_age  person_income  person_emp_length    loan_grade  \\\ncount  71837.000000   71837.000000       71837.000000  71837.000000   \nmean      26.013893   60952.458510           4.028469      1.122360   \nstd        3.896902   30190.895873           2.944659      1.083532   \nmin       20.000000    4080.000000           0.000000      0.000000   \n25%       23.000000   40000.000000           2.000000      0.000000   \n50%       25.000000   55000.000000           4.000000      1.000000   \n75%       28.000000   75000.000000           6.000000      2.000000   \nmax       40.000000  294000.000000          14.000000      6.000000   \n\n          loan_amnt  loan_int_rate  loan_percent_income  \\\ncount  71837.000000   71837.000000         71837.000000   \nmean    9421.238289      10.806692             0.166789   \nstd     5360.337100       3.026299             0.084070   \nmin      500.000000       5.420000             0.000000   \n25%     5000.000000       7.880000             0.100000   \n50%     8000.000000      10.950000             0.150000   \n75%    12000.000000      12.990000             0.220000   \nmax    33000.000000      20.620000             0.410000   \n\n       cb_person_default_on_file  cb_person_cred_hist_length   loan_status  \\\ncount               71837.000000                71837.000000  71837.000000   \nmean                    0.159096                    4.768713      0.166418   \nstd                     0.365768                    2.706606      0.372458   \nmin                     0.000000                    2.000000      0.000000   \n25%                     0.000000                    3.000000      0.000000   \n50%                     0.000000                    4.000000      0.000000   \n75%                     0.000000                    7.000000      0.000000   \nmax                     1.000000                   13.000000      1.000000   \n\n       ...  person_home_ownership_MORTGAGE  person_home_ownership_OTHER  \\\ncount  ...                    71837.000000                 71837.000000   \nmean   ...                        0.396676                     0.002213   \nstd    ...                        0.489211                     0.046994   \nmin    ...                        0.000000                     0.000000   \n25%    ...                        0.000000                     0.000000   \n50%    ...                        0.000000                     0.000000   \n75%    ...                        1.000000                     0.000000   \nmax    ...                        1.000000                     1.000000   \n\n       person_home_ownership_OWN  person_home_ownership_RENT  \\\ncount               71837.000000                71837.000000   \nmean                    0.061222                    0.539889   \nstd                     0.239739                    0.498410   \nmin                     0.000000                    0.000000   \n25%                     0.000000                    0.000000   \n50%                     0.000000                    1.000000   \n75%                     0.000000                    1.000000   \nmax                     1.000000                    1.000000   \n\n       loan_intent_DEBTCONSOLIDATION  loan_intent_EDUCATION  \\\ncount                   71837.000000           71837.000000   \nmean                        0.158609               0.215557   \nstd                         0.365314               0.411211   \nmin                         0.000000               0.000000   \n25%                         0.000000               0.000000   \n50%                         0.000000               0.000000   \n75%                         0.000000               0.000000   \nmax                         1.000000               1.000000   \n\n       loan_intent_HOMEIMPROVEMENT  loan_intent_MEDICAL  loan_intent_PERSONAL  \\\ncount                 71837.000000         71837.000000          71837.000000   \nmean                      0.102329             0.186714              0.165903   \nstd                       0.303082             0.389685              0.371996   \nmin                       0.000000             0.000000              0.000000   \n25%                       0.000000             0.000000              0.000000   \n50%                       0.000000             0.000000              0.000000   \n75%                       0.000000             0.000000              0.000000   \nmax                       1.000000             1.000000              1.000000   \n\n       loan_intent_VENTURE  \ncount         71837.000000  \nmean              0.170887  \nstd               0.376413  \nmin               0.000000  \n25%               0.000000  \n50%               0.000000  \n75%               0.000000  \nmax               1.000000  \n\n[8 rows x 68 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>person_age</th>\n      <th>person_income</th>\n      <th>person_emp_length</th>\n      <th>loan_grade</th>\n      <th>loan_amnt</th>\n      <th>loan_int_rate</th>\n      <th>loan_percent_income</th>\n      <th>cb_person_default_on_file</th>\n      <th>cb_person_cred_hist_length</th>\n      <th>loan_status</th>\n      <th>...</th>\n      <th>person_home_ownership_MORTGAGE</th>\n      <th>person_home_ownership_OTHER</th>\n      <th>person_home_ownership_OWN</th>\n      <th>person_home_ownership_RENT</th>\n      <th>loan_intent_DEBTCONSOLIDATION</th>\n      <th>loan_intent_EDUCATION</th>\n      <th>loan_intent_HOMEIMPROVEMENT</th>\n      <th>loan_intent_MEDICAL</th>\n      <th>loan_intent_PERSONAL</th>\n      <th>loan_intent_VENTURE</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>...</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n      <td>71837.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>26.013893</td>\n      <td>60952.458510</td>\n      <td>4.028469</td>\n      <td>1.122360</td>\n      <td>9421.238289</td>\n      <td>10.806692</td>\n      <td>0.166789</td>\n      <td>0.159096</td>\n      <td>4.768713</td>\n      <td>0.166418</td>\n      <td>...</td>\n      <td>0.396676</td>\n      <td>0.002213</td>\n      <td>0.061222</td>\n      <td>0.539889</td>\n      <td>0.158609</td>\n      <td>0.215557</td>\n      <td>0.102329</td>\n      <td>0.186714</td>\n      <td>0.165903</td>\n      <td>0.170887</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>3.896902</td>\n      <td>30190.895873</td>\n      <td>2.944659</td>\n      <td>1.083532</td>\n      <td>5360.337100</td>\n      <td>3.026299</td>\n      <td>0.084070</td>\n      <td>0.365768</td>\n      <td>2.706606</td>\n      <td>0.372458</td>\n      <td>...</td>\n      <td>0.489211</td>\n      <td>0.046994</td>\n      <td>0.239739</td>\n      <td>0.498410</td>\n      <td>0.365314</td>\n      <td>0.411211</td>\n      <td>0.303082</td>\n      <td>0.389685</td>\n      <td>0.371996</td>\n      <td>0.376413</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>20.000000</td>\n      <td>4080.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>500.000000</td>\n      <td>5.420000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>23.000000</td>\n      <td>40000.000000</td>\n      <td>2.000000</td>\n      <td>0.000000</td>\n      <td>5000.000000</td>\n      <td>7.880000</td>\n      <td>0.100000</td>\n      <td>0.000000</td>\n      <td>3.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>25.000000</td>\n      <td>55000.000000</td>\n      <td>4.000000</td>\n      <td>1.000000</td>\n      <td>8000.000000</td>\n      <td>10.950000</td>\n      <td>0.150000</td>\n      <td>0.000000</td>\n      <td>4.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>28.000000</td>\n      <td>75000.000000</td>\n      <td>6.000000</td>\n      <td>2.000000</td>\n      <td>12000.000000</td>\n      <td>12.990000</td>\n      <td>0.220000</td>\n      <td>0.000000</td>\n      <td>7.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>40.000000</td>\n      <td>294000.000000</td>\n      <td>14.000000</td>\n      <td>6.000000</td>\n      <td>33000.000000</td>\n      <td>20.620000</td>\n      <td>0.410000</td>\n      <td>1.000000</td>\n      <td>13.000000</td>\n      <td>1.000000</td>\n      <td>...</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 68 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"df_temp_2['loan_status'].value_counts(normalize=True)\n\ndf_temp_2.shape","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.778981Z","iopub.execute_input":"2024-10-30T05:45:24.779345Z","iopub.status.idle":"2024-10-30T05:45:24.790065Z","shell.execute_reply.started":"2024-10-30T05:45:24.779309Z","shell.execute_reply":"2024-10-30T05:45:24.788931Z"},"trusted":true},"execution_count":30,"outputs":[{"execution_count":30,"output_type":"execute_result","data":{"text/plain":"(71837, 68)"},"metadata":{}}]},{"cell_type":"code","source":"from imblearn.over_sampling import ADASYN, SVMSMOTE\n\nadasyn = ADASYN(n_jobs=-1, n_neighbors=250, random_state=0, sampling_strategy=0.3)\n# svmsmote = SVMSMOTE(sampling_strategy=0.3, random_state=0, k_neighbors=30, n_jobs=-1)\nall_feature_cols = [col for col in df_temp_2.columns if col != 'loan_status']\ntarget = 'loan_status'\nX = df_temp_2.drop(columns=[target])\ny = df_temp_2.loc[:, target]\n\nX_resampled, y_resampled = adasyn.fit_resample(X, y)\n\ndf_over_sampled = pd.DataFrame(X_resampled, columns=all_feature_cols)\ndf_over_sampled[target] = y_resampled\n\ndf_temp_2[target].value_counts(normalize=True), df_over_sampled[target].value_counts(normalize=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:24.791650Z","iopub.execute_input":"2024-10-30T05:45:24.792179Z","iopub.status.idle":"2024-10-30T05:45:29.964399Z","shell.execute_reply.started":"2024-10-30T05:45:24.792126Z","shell.execute_reply":"2024-10-30T05:45:29.963228Z"},"trusted":true},"execution_count":31,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/imblearn/over_sampling/_adasyn.py:156: FutureWarning: The parameter `n_jobs` has been deprecated in 0.10 and will be removed in 0.12. You can pass an nearest neighbors estimator where `n_jobs` is already set instead.\n  warnings.warn(\n","output_type":"stream"},{"execution_count":31,"output_type":"execute_result","data":{"text/plain":"(loan_status\n 0    0.833582\n 1    0.166418\n Name: proportion, dtype: float64,\n loan_status\n 0    0.758913\n 1    0.241087\n Name: proportion, dtype: float64)"},"metadata":{}}]},{"cell_type":"code","source":"df_over_sampled.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:45:29.966158Z","iopub.execute_input":"2024-10-30T05:45:29.966743Z","iopub.status.idle":"2024-10-30T05:45:29.993534Z","shell.execute_reply.started":"2024-10-30T05:45:29.966700Z","shell.execute_reply":"2024-10-30T05:45:29.992353Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 78905 entries, 0 to 78904\nData columns (total 68 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   person_age                      78905 non-null  float64\n 1   person_income                   78905 non-null  float64\n 2   person_emp_length               78905 non-null  float64\n 3   loan_grade                      78905 non-null  float64\n 4   loan_amnt                       78905 non-null  float64\n 5   loan_int_rate                   78905 non-null  float64\n 6   loan_percent_income             78905 non-null  float64\n 7   cb_person_default_on_file       78905 non-null  int64  \n 8   cb_person_cred_hist_length      78905 non-null  float64\n 9   income_to_loan_ratio            78905 non-null  float64\n 10  age_emp_length                  78905 non-null  float64\n 11  RENT_MEDICAL                    78905 non-null  int64  \n 12  RENT_DEBTCONSOLIDATION          78905 non-null  int64  \n 13  RENT_EDUCATION                  78905 non-null  int64  \n 14  RENT_PERSONAL                   78905 non-null  int64  \n 15  RENT_HOMEIMPROVEMENT            78905 non-null  int64  \n 16  RENT_VENTURE                    78905 non-null  int64  \n 17  MORTGAGE_MEDICAL                78905 non-null  int64  \n 18  MORTGAGE_DEBTCONSOLIDATION      78905 non-null  int64  \n 19  RENT_D                          78905 non-null  int64  \n 20  RENT_B                          78905 non-null  int64  \n 21  RENT_C                          78905 non-null  int64  \n 22  RENT_A                          78905 non-null  int64  \n 23  MORTGAGE_D                      78905 non-null  int64  \n 24  RENT_N                          78905 non-null  int64  \n 25  RENT_Y                          78905 non-null  int64  \n 26  MORTGAGE_N                      78905 non-null  int64  \n 27  MEDICAL_D                       78905 non-null  int64  \n 28  DEBTCONSOLIDATION_D             78905 non-null  int64  \n 29  MEDICAL_B                       78905 non-null  int64  \n 30  PERSONAL_D                      78905 non-null  int64  \n 31  PERSONAL_B                      78905 non-null  int64  \n 32  EDUCATION_B                     78905 non-null  int64  \n 33  DEBTCONSOLIDATION_B             78905 non-null  int64  \n 34  HOMEIMPROVEMENT_D               78905 non-null  int64  \n 35  VENTURE_D                       78905 non-null  int64  \n 36  EDUCATION_D                     78905 non-null  int64  \n 37  MEDICAL_C                       78905 non-null  int64  \n 38  EDUCATION_C                     78905 non-null  int64  \n 39  HOMEIMPROVEMENT_B               78905 non-null  int64  \n 40  DEBTCONSOLIDATION_C             78905 non-null  int64  \n 41  HOMEIMPROVEMENT_C               78905 non-null  int64  \n 42  EDUCATION_A                     78905 non-null  int64  \n 43  MEDICAL_A                       78905 non-null  int64  \n 44  PERSONAL_C                      78905 non-null  int64  \n 45  MEDICAL_N                       78905 non-null  int64  \n 46  DEBTCONSOLIDATION_N             78905 non-null  int64  \n 47  EDUCATION_N                     78905 non-null  int64  \n 48  PERSONAL_N                      78905 non-null  int64  \n 49  HOMEIMPROVEMENT_N               78905 non-null  int64  \n 50  B_N                             78905 non-null  int64  \n 51  D_Y                             78905 non-null  int64  \n 52  D_N                             78905 non-null  int64  \n 53  A_N                             78905 non-null  int64  \n 54  C_N                             78905 non-null  int64  \n 55  C_Y                             78905 non-null  int64  \n 56  E_N                             78905 non-null  int64  \n 57  person_home_ownership_MORTGAGE  78905 non-null  int64  \n 58  person_home_ownership_OTHER     78905 non-null  int64  \n 59  person_home_ownership_OWN       78905 non-null  int64  \n 60  person_home_ownership_RENT      78905 non-null  int64  \n 61  loan_intent_DEBTCONSOLIDATION   78905 non-null  int64  \n 62  loan_intent_EDUCATION           78905 non-null  int64  \n 63  loan_intent_HOMEIMPROVEMENT     78905 non-null  int64  \n 64  loan_intent_MEDICAL             78905 non-null  int64  \n 65  loan_intent_PERSONAL            78905 non-null  int64  \n 66  loan_intent_VENTURE             78905 non-null  int64  \n 67  loan_status                     78905 non-null  int64  \ndtypes: float64(10), int64(58)\nmemory usage: 40.9 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"import copy\n\ndf_over_sampled_low_memory = copy.deepcopy(df_over_sampled)\nfor col in df_over_sampled_low_memory.select_dtypes(include=['int64']).columns:\n    df_over_sampled_low_memory[col] = df_over_sampled_low_memory[col].astype('int32')\n\nfor col in df_over_sampled_low_memory.select_dtypes(include=['float64']).columns:\n    df_over_sampled_low_memory[col] = df_over_sampled_low_memory[col].astype('float32')\ndf_over_sampled_low_memory.info()","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:56:21.385930Z","iopub.execute_input":"2024-10-30T05:56:21.386454Z","iopub.status.idle":"2024-10-30T05:56:21.531764Z","shell.execute_reply.started":"2024-10-30T05:56:21.386401Z","shell.execute_reply":"2024-10-30T05:56:21.530254Z"},"trusted":true},"execution_count":41,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 78905 entries, 0 to 78904\nData columns (total 68 columns):\n #   Column                          Non-Null Count  Dtype  \n---  ------                          --------------  -----  \n 0   person_age                      78905 non-null  float32\n 1   person_income                   78905 non-null  float32\n 2   person_emp_length               78905 non-null  float32\n 3   loan_grade                      78905 non-null  float32\n 4   loan_amnt                       78905 non-null  float32\n 5   loan_int_rate                   78905 non-null  float32\n 6   loan_percent_income             78905 non-null  float32\n 7   cb_person_default_on_file       78905 non-null  int32  \n 8   cb_person_cred_hist_length      78905 non-null  float32\n 9   income_to_loan_ratio            78905 non-null  float32\n 10  age_emp_length                  78905 non-null  float32\n 11  RENT_MEDICAL                    78905 non-null  int32  \n 12  RENT_DEBTCONSOLIDATION          78905 non-null  int32  \n 13  RENT_EDUCATION                  78905 non-null  int32  \n 14  RENT_PERSONAL                   78905 non-null  int32  \n 15  RENT_HOMEIMPROVEMENT            78905 non-null  int32  \n 16  RENT_VENTURE                    78905 non-null  int32  \n 17  MORTGAGE_MEDICAL                78905 non-null  int32  \n 18  MORTGAGE_DEBTCONSOLIDATION      78905 non-null  int32  \n 19  RENT_D                          78905 non-null  int32  \n 20  RENT_B                          78905 non-null  int32  \n 21  RENT_C                          78905 non-null  int32  \n 22  RENT_A                          78905 non-null  int32  \n 23  MORTGAGE_D                      78905 non-null  int32  \n 24  RENT_N                          78905 non-null  int32  \n 25  RENT_Y                          78905 non-null  int32  \n 26  MORTGAGE_N                      78905 non-null  int32  \n 27  MEDICAL_D                       78905 non-null  int32  \n 28  DEBTCONSOLIDATION_D             78905 non-null  int32  \n 29  MEDICAL_B                       78905 non-null  int32  \n 30  PERSONAL_D                      78905 non-null  int32  \n 31  PERSONAL_B                      78905 non-null  int32  \n 32  EDUCATION_B                     78905 non-null  int32  \n 33  DEBTCONSOLIDATION_B             78905 non-null  int32  \n 34  HOMEIMPROVEMENT_D               78905 non-null  int32  \n 35  VENTURE_D                       78905 non-null  int32  \n 36  EDUCATION_D                     78905 non-null  int32  \n 37  MEDICAL_C                       78905 non-null  int32  \n 38  EDUCATION_C                     78905 non-null  int32  \n 39  HOMEIMPROVEMENT_B               78905 non-null  int32  \n 40  DEBTCONSOLIDATION_C             78905 non-null  int32  \n 41  HOMEIMPROVEMENT_C               78905 non-null  int32  \n 42  EDUCATION_A                     78905 non-null  int32  \n 43  MEDICAL_A                       78905 non-null  int32  \n 44  PERSONAL_C                      78905 non-null  int32  \n 45  MEDICAL_N                       78905 non-null  int32  \n 46  DEBTCONSOLIDATION_N             78905 non-null  int32  \n 47  EDUCATION_N                     78905 non-null  int32  \n 48  PERSONAL_N                      78905 non-null  int32  \n 49  HOMEIMPROVEMENT_N               78905 non-null  int32  \n 50  B_N                             78905 non-null  int32  \n 51  D_Y                             78905 non-null  int32  \n 52  D_N                             78905 non-null  int32  \n 53  A_N                             78905 non-null  int32  \n 54  C_N                             78905 non-null  int32  \n 55  C_Y                             78905 non-null  int32  \n 56  E_N                             78905 non-null  int32  \n 57  person_home_ownership_MORTGAGE  78905 non-null  int32  \n 58  person_home_ownership_OTHER     78905 non-null  int32  \n 59  person_home_ownership_OWN       78905 non-null  int32  \n 60  person_home_ownership_RENT      78905 non-null  int32  \n 61  loan_intent_DEBTCONSOLIDATION   78905 non-null  int32  \n 62  loan_intent_EDUCATION           78905 non-null  int32  \n 63  loan_intent_HOMEIMPROVEMENT     78905 non-null  int32  \n 64  loan_intent_MEDICAL             78905 non-null  int32  \n 65  loan_intent_PERSONAL            78905 non-null  int32  \n 66  loan_intent_VENTURE             78905 non-null  int32  \n 67  loan_status                     78905 non-null  int32  \ndtypes: float32(10), int32(58)\nmemory usage: 20.5 MB\n","output_type":"stream"}]},{"cell_type":"code","source":"for col in df_over_sampled.select_dtypes('float64').columns:\n    print(col)\n    print(np.max(df_over_sampled[col]))\n    print(np.min(df_over_sampled[col]))\n    print('-'*50)","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:53:45.625474Z","iopub.execute_input":"2024-10-30T05:53:45.625949Z","iopub.status.idle":"2024-10-30T05:53:45.648795Z","shell.execute_reply.started":"2024-10-30T05:53:45.625905Z","shell.execute_reply":"2024-10-30T05:53:45.647367Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"person_age\n40.0\n20.0\n--------------------------------------------------\nperson_income\n294000.0\n4080.0\n--------------------------------------------------\nperson_emp_length\n14.0\n0.0\n--------------------------------------------------\nloan_grade\n6.0\n0.0\n--------------------------------------------------\nloan_amnt\n33000.0\n500.0\n--------------------------------------------------\nloan_int_rate\n20.62\n5.42\n--------------------------------------------------\nloan_percent_income\n0.41\n0.0\n--------------------------------------------------\ncb_person_cred_hist_length\n13.0\n2.0\n--------------------------------------------------\nincome_to_loan_ratio\n21.0\n0.32\n--------------------------------------------------\nage_emp_length\n333.0\n0.0\n--------------------------------------------------\n","output_type":"stream"}]},{"cell_type":"code","source":"df_over_sampled.to_csv('loan_approval_data_train_original_processed_high_memory.csv')\ndf_over_sampled_low_memory.to_csv('loan_approval_data_train_original_processed_low_memory.csv')","metadata":{"execution":{"iopub.status.busy":"2024-10-30T05:58:15.736912Z","iopub.execute_input":"2024-10-30T05:58:15.737395Z","iopub.status.idle":"2024-10-30T05:58:19.610179Z","shell.execute_reply.started":"2024-10-30T05:58:15.737353Z","shell.execute_reply":"2024-10-30T05:58:19.608806Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}