{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":9687145,"sourceType":"datasetVersion","datasetId":5921947}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:39:22.869878Z","iopub.execute_input":"2024-10-21T22:39:22.870280Z","iopub.status.idle":"2024-10-21T22:39:23.845973Z","shell.execute_reply.started":"2024-10-21T22:39:22.870244Z","shell.execute_reply":"2024-10-21T22:39:23.845207Z"}},"outputs":[],"execution_count":1},{"cell_type":"code","source":"!pip install gdown\nimport gdown\ndata_url = 'https://drive.google.com/uc?export=download&confirm=6gh6&id=1VNpyNkGxHdskfdTNRSjjyNa5qC9u0JyV'\noutput_data = \"fraud_data.csv\"\ndata_dict_url = 'https://drive.google.com/uc?id=1VQ-HAm0oHbv0GmDKP2iqqFNc5aI91OLn&export=download'\noutput_dict = \"data_dict.txt\"\ngdown.download(data_dict_url, output_dict, quiet=False)\ngdown.download(data_url, output_data, quiet=False)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:39:34.442222Z","iopub.execute_input":"2024-10-21T22:39:34.443107Z","iopub.status.idle":"2024-10-21T22:39:55.338622Z","shell.execute_reply.started":"2024-10-21T22:39:34.443064Z","shell.execute_reply":"2024-10-21T22:39:55.337618Z"}},"outputs":[{"name":"stdout","text":"Collecting gdown\n  Downloading gdown-5.2.0-py3-none-any.whl.metadata (5.8 kB)\nRequirement already satisfied: beautifulsoup4 in /opt/conda/lib/python3.10/site-packages (from gdown) (4.12.3)\nRequirement already satisfied: filelock in /opt/conda/lib/python3.10/site-packages (from gdown) (3.15.1)\nRequirement already satisfied: requests[socks] in /opt/conda/lib/python3.10/site-packages (from gdown) (2.32.3)\nRequirement already satisfied: tqdm in /opt/conda/lib/python3.10/site-packages (from gdown) (4.66.4)\nRequirement already satisfied: soupsieve>1.2 in /opt/conda/lib/python3.10/site-packages (from beautifulsoup4->gdown) (2.5)\nRequirement already satisfied: charset-normalizer<4,>=2 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (3.3.2)\nRequirement already satisfied: idna<4,>=2.5 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (3.7)\nRequirement already satisfied: urllib3<3,>=1.21.1 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (1.26.18)\nRequirement already satisfied: certifi>=2017.4.17 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (2024.8.30)\nRequirement already satisfied: PySocks!=1.5.7,>=1.5.6 in /opt/conda/lib/python3.10/site-packages (from requests[socks]->gdown) (1.7.1)\nDownloading gdown-5.2.0-py3-none-any.whl (18 kB)\nInstalling collected packages: gdown\nSuccessfully installed gdown-5.2.0\n","output_type":"stream"},{"name":"stderr","text":"Downloading...\nFrom: https://drive.google.com/uc?id=1VQ-HAm0oHbv0GmDKP2iqqFNc5aI91OLn&export=download\nTo: /kaggle/working/data_dict.txt\n100%|██████████| 1.30k/1.30k [00:00<00:00, 4.17MB/s]\nDownloading...\nFrom: https://drive.google.com/uc?export=download&confirm=6gh6&id=1VNpyNkGxHdskfdTNRSjjyNa5qC9u0JyV\nTo: /kaggle/working/fraud_data.csv\n100%|██████████| 494M/494M [00:02<00:00, 215MB/s]  \n","output_type":"stream"},{"execution_count":3,"output_type":"execute_result","data":{"text/plain":"'fraud_data.csv'"},"metadata":{}}],"execution_count":3},{"cell_type":"code","source":"import pandas as pd\ndf = pd.read_csv('/kaggle/working/fraud_data.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:40:13.074524Z","iopub.execute_input":"2024-10-21T22:40:13.075337Z","iopub.status.idle":"2024-10-21T22:40:26.476073Z","shell.execute_reply.started":"2024-10-21T22:40:13.075290Z","shell.execute_reply":"2024-10-21T22:40:26.475003Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"from sklearn.model_selection import StratifiedShuffleSplit\n\ndf_encoded = pd.get_dummies(df, columns=['type'])\ndf_encoded[df_encoded.select_dtypes(include=['bool']).columns] = df_encoded.select_dtypes(include=['bool']).astype(int)\ndf_final = df_encoded.drop(['nameOrig', 'nameDest'], axis=1)\nsplit = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)\nX = df_final.drop('isFraud', axis=1)\ny = df_final['isFraud']\nfor train_index, test_index in split.split(X, y):\n  X_train, X_test = X.iloc[train_index], X.iloc[test_index]\n  y_train, y_test = y.iloc[train_index], y.iloc[test_index]\nX_train.shape, X_test.shape, y_train.shape, y_test.shape","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pickle\n\nwith open('/kaggle/input/ddfdfdf/trials_xgb_gbtree_file.pkl', 'rb') as f:\n    trials_resume = pickle.load(f)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T23:17:29.027053Z","iopub.execute_input":"2024-10-21T23:17:29.028104Z","iopub.status.idle":"2024-10-21T23:17:29.678251Z","shell.execute_reply.started":"2024-10-21T23:17:29.028050Z","shell.execute_reply":"2024-10-21T23:17:29.677339Z"}},"outputs":[],"execution_count":10},{"cell_type":"code","source":"from xgboost import XGBClassifier\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.metrics import make_scorer, roc_auc_score, f1_score, r2_score, precision_score, recall_score\nfrom hyperopt import fmin, hp, tpe, Trials\nimport pickle\n\nprint('starting hyperparameter tuning')\nsss2 = StratifiedShuffleSplit(n_splits=5, test_size=0.2, random_state=42)\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\n\ndef objective(params):\n    # print(f'params: {params}')\n    model = XGBClassifier(random_state=42, verbosity=0, booster='gbtree', tree_method='gpu_hist', **params)\n    scores = cross_val_score(model, X_train_scaled, y_train, cv=sss2, scoring=make_scorer(roc_auc_score), n_jobs=-1)\n    mean_scores = np.mean(scores)\n    return -mean_scores\n\nspace = {\n    \n    'learning_rate':hp.loguniform('learning_rate', 0.0001, 0.3),\n    'n_estimators':hp.uniformint('n_estimators', 60, 600),\n    'max_depth':hp.uniformint('max_depth', 3, 10),\n    'gamma':hp.uniformint('gamma', 0, 5),\n    'subsample':hp.uniform('subsample', 0.5, 1.0),\n    'lambda':hp.uniform('lambda', 0.0, 1.0),\n    'alpha':hp.uniform('alpha', 0.0, 1.0),\n    \n}\n\ntrials_xgb_gbtree = Trials()\nbest = fmin(fn=objective, space=space, algo=tpe.suggest, trials=trials_resume, max_evals=700, verbose=1)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T23:17:55.611849Z","iopub.execute_input":"2024-10-21T23:17:55.612475Z"}},"outputs":[{"name":"stdout","text":"starting hyperparameter tuning\n 79%|███████▊  | 550/700 [44:26<2:07:37, 51.05s/trial, best loss: -0.930837826916501]","output_type":"stream"}],"execution_count":null},{"cell_type":"code","source":"trials_file_name = \"trials_xgb_gbtree_file.pkl\"\nprint(f'downloading the trials object using pickle to the file named:')\n\nwith open(trials_file_name, 'wb') as f:\n    pickle.dump(trials_xgb_gbtree, f)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:35:59.534033Z","iopub.status.idle":"2024-10-21T22:35:59.534522Z","shell.execute_reply.started":"2024-10-21T22:35:59.534263Z","shell.execute_reply":"2024-10-21T22:35:59.534288Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"print(f'fitting the best hyperparams found from hyperopt : {best}')\nfinal_model = XGBClassifier(random_state=42, verbosity=0, booster='gbtree', **best)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:35:59.535940Z","iopub.status.idle":"2024-10-21T22:35:59.536478Z","shell.execute_reply.started":"2024-10-21T22:35:59.536207Z","shell.execute_reply":"2024-10-21T22:35:59.536234Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import make_scorer, roc_auc_score, f1_score, r2_score, precision_score, recall_score\n\nX_test_scaled = scaler.transform(X_test)\ny_pred = final_model.predict(X_test_scaled)\n\nprint('f1, roc_auc, r2, precision, recall')\nf1_score(y_test, y_pred), roc_auc_score(y_test, y_pred), r2_score(y_test, y_pred), precision_score(y_test, y_pred), recall_score(y_test, y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-21T22:35:59.538147Z","iopub.status.idle":"2024-10-21T22:35:59.538617Z","shell.execute_reply.started":"2024-10-21T22:35:59.538374Z","shell.execute_reply":"2024-10-21T22:35:59.538398Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}